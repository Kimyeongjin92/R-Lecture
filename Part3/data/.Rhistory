list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)  #
sapply(c(list1,list2),max)  #Vector의 형태로 출력.
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
attach(Fruits)
tapply(Sales, Fruit, sum)
aggregate(data1$연령별~data1[1,],data1,sum)
aggregate(~data1[1,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
data1[1,]
aggregate(data1[,]~data1$연령별,data1,sum)
aggregate(data1[c(1:5),]~data1$연령별,data1,sum)
(1:5)
aggregate(data1[c(1:5),]~data1$연령별,data1,sum)
c(1:5)
aggregate(data1[,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
aggregate(data1[,2]~data1$연령별,data1,sum)
aggregate(data1[,1]~data1$연령별,data1,sum)
aggregate(data1[2,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
data1[1,]
data1$연령별
aggregate(data1$연령별~data1[1,],data1,sum)
aggregate(Sales~Year,Fruits,sum) #년도별 판매 총액
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) ; mat1
apply(mat1,1,sum)          # 1 - 행 단위 계산
apply(mat1,2,sum)          # 2 - 열 단위 계산
apply(mat1,1,sum)          # 1 - 행 단위 계산
apply(mat1,2,sum)          # 2 - 열 단위 계산
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) ; mat1
apply(mat1,2,sum)          # 2 - 열 단위 계산
apply(data1,2,sum)
apply(data1,2,sum)
tapply(data1$연령별,data1,sum)
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
attach(Fruits)
mapply(sum,data1)
mapply(sum,data1[,1])
mapply(sum,data1[,c(2)])
mapply(sum,data1[,c(2:13)])
mapply(sum,data1[,c(2:15)])
mapply(sum,data1[,c(2:15)])
mapply(sum,data1[c(1:5),])
aggregate(data1[,c(2:15)]~data1$연령별,data1,sum)
aggregate(data1[,c(2:15)]~data1$연령별,data1,sum)
data1[,c(2:15)]
data1$연령별
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
apply(data1,2,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],1,sum)
apply(data1[,c(2:15)],1,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(노선번호~승차,data2,sum)
data2
aggregate(승차~노선번호,data2,sum)
tapply(노선번호,승차,sum)
attach(data2)
tapply(노선번호,승차,sum)
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(노선번호~승차+하차,data2,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(노선번호~승차+하차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
data2
aggregate(data2$노선번호~승차+하차,data2,sum)
aggregate(data2$노선번호~data$승차+data$하차,data2,sum)
aggregate(data2$노선번호~data$승차+data$하차,data2,sum)
aggregate(data2$노선번호~data$승차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
aggregate(노선번호~승차+하차,data2,sum)
aggregate(Sales~Fruit,Fruits,sum)
aggregate(승차~노선번호,data1,sum)
aggregate(승차~노선번호,data2,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(승차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
aggregate(승차+하차차~노선번호,data2,sum)
aggregate(승차+하차~노선번호,data2,sum)
data1 <- read.csv('data1.csv')
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data1 <- read.csv('data1.csv')
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,-1])
apply(data1[,-1],2,sum)
apply(data1[,-1],1,sum)
mapply(sum,data1[,-1])
apply(data1[,-1],2,sum)
apply(data1[,-1],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
sapply(data2[,c(3,4)],sum)
apply(data2[,c(3,4)],2,sum)
Fruits
aggregate(Sales~Year,Fruits,sum) #년도별 판매 총액
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mat <- matrix(c(1:6),dim(3:2))
mat <- matrix(c(1:6),dim(2,3))
mat <- matrix(c(1:6),dim(3,2))
mat <- matrix(c(1:6),nrow=2)
mat
mat <- matrix(c(1:6),nrow=2,byrow=T)
mat
a   <- c(1,1,1)
weep(mat1,2,a)
sweep(mat1,2,a)
a   <- rep(1,3)
sweep(mat1,2,a)
mat <- matrix(c(1:6),nrow=2,byrow=T)
a   <- rep(1,3)
sweep(mat1,1,a)
sweep(mat1,2,a)
b   <- matrix(c(2,2))
b
sweep(mat1,1,b)
library(googleVis)
length(Fruits)
Fruits
ceiling(2.3)
floor(2.3)
abs(-1)
ceiling(-2.3)
floor(-2.3)   # -3.
floor(-2.3)   # -3
round(2.5)
round(2.51)
round(2.4)
choose(5,3)
myfunc <- function(){
return(10)
}
myfunc
myfunc()
myfunc2 <- function(x) {
y = x * x ;
return(y)
}
myfunc2()
myfunc2(-3)
func_test <- function(x,y){
z = x-y
return(z)
}
func_test(3,2)
func_test(2,3)
func_test <- function(x,y){
abs(z) = x-y
return(z)
}
func_test(3,2)
func_test <- function(x,y){
z = x-y
return(abs(z))
}
func_test(3,2)
func_test(2,3)
library(plotly)
library(dplyr)
n <- 10000
theta <- runif(n,0,2*pi)
u0 <- runif(n,-1,1)
x0 <- sqrt(1-u0^2)*cos(theta)
y0 <- sqrt(1-u0^2)*sin(theta)
z0 <- u0
sphere1 <- data.frame(x=x0*2+5,y=y0*2+5,z=z0*2+2)
sphere2 <- data.frame(x=x0+5,y=y0+5,z=z0+5)
sphere <- rbind(sphere1, sphere2)
sphere$colors <-c('#f2f2f2')
sphere$symbol <-c('circle')
sphere$size <- 10
plot_ly(sphere, x = ~x, y = ~y, z = ~z,
marker=list(size= ~sphere$size, opacity=.9, color=sphere$colors, symbol=sphere$symbol)) %>% layout(paper_bgcolor='rgb(193, 222, 255)')  %>% layout(title = 'Snow Man')
# make nose and eye
x <- c(5,5,
rep(5, length(seq(5.2,5.3,.02))),5.2,4.8, # nose and eye
3.5,6.5)
y <- c(5,6,
seq(5.2,5.3,.02),5.2,5.2, # nose and eye
6.5,3.5)
z <- c(1.2,1.1,
rep(5.1, length(seq(5.2,5.3,.02))),5.315,5.315, # nose and eye
1.12,1.12)
size <-c(1,1,
rep(10, length(seq(5.2,5.3,.02))),10,10, # nose and eye
1,1)
colors <-c('#ffffff','#ffffff',
rep('#f97c00', length(seq(5.2,5.3,.02))),'#3a3a3a','#3a3a3a', # nose and eye
'#ffffff','#ffffff')
symbol <-c('circle','circle',
rep('circle', length(seq(5.2,5.3,.02))),'circle','circle',
'circle','circle')
face <- data.frame(x,y,z,size,colors,symbol)
plot_ly(face, x = ~x, y = ~y, z = ~z,
marker=list(size= ~ face$size, opacity=.9, color= face$colors, symbol= face$symbol)) %>% layout(paper_bgcolor='rgb(193, 222, 255)')  %>% layout(title = 'Snow Man')
# make smile
x1 <- seq(-pi,0,.2)
z1 <- sin(x1)*.1
x2 <- (x1*-.1)+4.85
z2 <- z1+4.6
y2 <- rep(5.2,length(z2))
smile <- data.frame(x=x2,y=y2,z=z2, size=rep(8, length(z2)), colors=rep(c('#f90000'),length(z2)), symbol=rep(c('circle'),length(z2)))
# make smile face
smile_face <- rbind(face, smile)
plot_ly(smile_face, x = ~x, y = ~y, z = ~z,
marker=list(size= ~smile_face$size, opacity=.9, color=smile_face$colors, symbol=smile_face$symbol)) %>% layout(paper_bgcolor='rgb(193, 222, 255)')  %>% layout(title = 'Snow Man')
# snow man !!
snowman <-rbind(sphere, face, smile)
p <- plot_ly(snowman, x = ~x, y = ~y, z = ~z,
marker=list(size= ~snowman$size, opacity=.9, color=snowman$colors, symbol=snowman$symbol)) %>% layout(paper_bgcolor='rgb(193, 222, 255)')  %>% layout(title = 'Snow Man')
p
# merry christmas!
Sys.setenv("plotly_username"="XXXX")
Sys.setenv("plotly_api_key"="XXXX")
plotly_POST(p, filename = "snow_man_xmas")
scan1 <- scan('scan_1.txt')         ; scan1 #
scan2 <- scan('scan_2.txt')         ; scan2 # 1.00과 같은 소수점을 지워버림
scan2 <- scan('scan_2.txt',what='') ; scan2 # what='' 소수점까지 읽어줌.
scan3 <- scan('scan_3.txt',what='') ; scan3
scan3 <- scan('scan_3.txt') ; scan3
scan3 <- scan('scan_3.txt') ; scan3
scan3 <- scan('scan_3.txt',what='') ; scan3
scan_3.txt
scan3 <- scan('scan_3.txt',what='') ; scan3
scan1 <- scan('scan_1.txt')         ; scan1 #
scan2 <- scan('scan_2.txt')         ; scan2 # 1.00과 같은 소수점을 지워버림
scan2 <- scan('scan_2.txt',what='') ; scan2 # what='' 소수점까지 읽어줌.
scan3 <- scan('scan_3.txt',what='') ; scan3
scan4 <- scan('scan_4.txt',what='') ; scan4 # 문자, 숫자가 섞여있을 경우 문자로 출력.
input  <- scan()                            # Console 창에 직접입력해서 데이터를 만듦.
input  <- scan()                            # Console 창에 직접입력해서 데이터를 만듦.
input  <- scan()                            # Console 창에 직접입력해서 데이터를 만듦.
input  <- scan()                            # Console 창에 직접입력해서 데이터를 만듦.
input  <- scan()                            # Console 창에 직접입력해서 데이터를 만듦.
input2 <- scan(what="")                     #
input  <- scan()                            # Console 창에 직접입력해서 데이터를 만듦.
input
input2 <- scan(what="")                     #
input2
input3 <- readline()                        #consol창에 입력 : a quick brown fox
input2 <- scan(what="")                     # 문자는 what=''
input2
input3 <- readline()                        #consol창에 입력 : a quick brown fox
input3
input3 <- readline()                        #consol창에 입력 : a quick brown fox
input4 <- readline("a quick brown fox")
input5 <- readLines('scan_4.txt')
input5
scan4 <- scan('scan_4.txt',what='') ; scan4 # 문자, 숫자가 섞여있을 경우 문자로 출력.
input5 <- readLines('scan_4.txt')
input5
input5 <- readLines('scan_4.txt')
input5
fruits  <- read.table('fruits.txt')            ; fruits
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 # SKIP은 #과 같은 주석이 포함되어 제거된다.
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # 내용의 #과 같은 주석은 빼고 읽는다.
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 # SKIP은 #과 같은 주석이 포함되어 제거된다.
fruits4 <- read.table('fruits_2.txt',nrows=2)  ; fruits4
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 # SKIP은 #과 같은 주석이 포함되어 제거된다.
fruits4 <- read.table('fruits_2.txt',nrows=2)  ; fruits4
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 # SKIP은 #과 같은 주석이 포함되어 제거된다.
fruits4 <- read.table('fruits_2.txt',nrows=2)  ; fruits4
f2top   <- read.table('fruits_2.txt',nrows=2)  ; f2top
f2top   <- read.table('fruits_2.txt',nrows=2)  ; f2top
f2bottom<- read.table('fruits_2.txt',skip=3)   ; f2bottom #이런 방식으로
f2bottom<- read.table('fruits_2.txt',skip=3)   ; f2bottom #이런 방식으로
f2top   <- read.table('fruits_2.txt',nrows=2)  ; f2top
fruits5 <- read.csv('fruits_3.csv') ; fruits5 #csv를 txt로 보면 사이사이에 쉼표(,)로 구분됨.
fruits6 <- read.csv('fruits_4.csv') ; fruits6 #txt와 다르게 csv는 header=T가 default 되어있음.
fruits5 <- read.csv('fruits_3.csv') ; fruits5 #csv를 txt로 보면 사이사이에 쉼표(,)로 구분됨.
fruits6 <- read.csv('fruits_4.csv') ; fruits6 #txt와 다르게 csv는 header=T가 default 되어있음.
fruits6 <- read.csv('fruits_4.csv',header=F) ; fruits6
label  <- c('NO','NAME','PRICE','QTY')
fruit7 <- read.csv('fruits_4.csv',header=F,col.names=label)
library(googleVis)
sort <- Fruit
library(googleVis)
sort <- Fruits$Sales
sort1 <- Fruits$Sales
sort1
sort(sort1)
sort(sort1,decreasing=T)
install.packages('plyr')
install.packages("plyr")
install.packages("plyr")
library(plyr)
fruits <- read.csv("fruits_10.csv",header=T)
fruits
fruits <- read.csv("fruits_10.csv")
fruits
fruits <- read.csv("fruits_10.csv")
fruits
fruits <- read.csv("fruits_10.csv",header=T)
fruits
fruits <- read.csv("fruits_10.csv",header=T) ;fruits
fruits <- read.csv("fruits_10.csv",header=F) ;fruits
fruits <- read.csv("fruits_10.csv") ;fruits
ddply(fruits,summarise,sum_qty=sum(qty),sum_price=sum(pric))
ddply(fruits,'name',summarise,sum_qty=sum(qty),sum_price=sum(pric))
ddply(fruits,'name',summarise,sum_qty=sum(qty),sum_price=sum(price))
ddply(fruits,'name',summarise,max_qty(qyt),min_price=men(price))
ddply(fruits,'name',summarise,max_qty(qtyt),min_price=men(price))
ddply(fruits,'name',summarise,max_qty(qty),min_price=men(price))
ddply(fruits,'name',summarise,max_qty(qty),min_price=min(price))
ddply(fruits,'name',summarise,max_qty=max(qty),min_price=min(price))
ddply(fruits,c('year','name'),summarise,max_qty=max(qty),min_price)
ddply(fruits,c('year','name'),summarise,max_qty=max(qty),min_price=min(price))
ddply(fruits,'name',transform,sum_qty=sum(qty))
ddply(fruits,'name',summarise,max_qty=max(qty),min_price=min(price))
ddply(fruits,'name',transform,sum_qty=sum(qty))
ddply(fruits,'name',transform,sum_qty=sum(qty),pct_qty=(100*qty)/sum(qty))
install.packages('dplyr')
library(dplyr)
library(dplyr)
data1<-read.csv("2013년_프로야구선수_성적.csv")
data1<-read.csv("2013년_프로야구선수_성적.csv") ; data1
data2<- filter(data1,경기>120)
data2<- filter(data1,경기>120)                   ; data2
data3<- filter(data1,경기>120&득점>80)
data3<- filter(data1,경기>120&득점>80)           ; data3.
data3<- filter(data1,경기>120&득점>80)           ; data3
data4 <- filter(data1,포지션 %n% c('1루수','3루수'))
data1 <- read.csv("2013년_프로야구선수_성적.csv") ; data1
data2 <- filter(data1,경기>120)                   ; data2
data3 <- filter(data1,경기>120&득점>80)           ; data3
data4 <- filter(data1,포지션 %n% c('1루수','3루수'))
data4 <- filter(data1,포지션 %in% c('1루수','3루수'))
data1 <- read.csv("2013년_프로야구선수_성적.csv")     ; data1
data2 <- filter(data1,경기>120)                       ; data2
data3 <- filter(data1,경기>120&득점>80)               ; data3
data4 <- filter(data1,포지션 %in% c('1루수','3루수')) ;data4
select(data1,선수명,포지션,팀)
select(data1,순위:타수수)
select(data1,순위:타수)
select(data1,-홈런,-타점,-도루)
data4 <- filter(data1,포지션 == '1루수' | 포지션 == '3루수' )
data4 <- filter(data1,포지션 == '1루수' | 포지션 == '3루수' ) ; data4
data1 %>%
select(선수명,팀,경기,타수) %>%
filter(타수>400)
data1 %>%
select(선수명,팀,경기,타수) %>%
filter(타수>400)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>-400)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400) %>% arrange(타수)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400) %>% mutate(경기x타수= 경기*타수) %>% arrange(타수)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400) %>% arrange(타수)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400) %>% mutate(경기x타수= 경기*타수) %>% arrange(경기x타수)
data1 %>% select(선수명,팀,경기,타수) %>% mutate(경기x타수= 경기*타수) %>% arrange(경기x타수)
data1 %>% group_by(팀)
data1 %>% group_by(팀) %>% filter(타수>400)
data1 %>% group_by(팀) %>% filter(타수>100)
data1 %>% group_by(팀) %>% summarise(avarage = mean(경기,na.rm=T))
aggregate(경기~팀,data1,mean)
data1 %>% group_by(팀) %>% summarise_each(funs(mean),경기,타수)
data1 %>% group_by(팀) %>% summarise_each(funs(mean),경기,타수)
data1 %>% group_by(팀) %>% summarise_each(funs(mean),경기,타수)
data1 %>% group_by(팀) %>% summarise(avarage = mean(경기,타수,na.rm=T))
data1 %>% group_by(팀) %>% summarise(avarage = mean(경기,na.rm=T))
data1 %>% group_by(팀) %>% summarise_each(funs(mean),경기,타수)
aggregate(경기+타수~팀,data1,mean)
aggregate(경기,타수~팀,data1,mean)
aggregate(경기~팀,data1,mean)
aggregate(경기,타수수~팀,data1,mean)
aggregate(경기,타수~팀,data1,mean)
aggregate(경기~팀+타수,data1,mean)
aggregate(경기~팀,data1,mean)
data1 %>% group_by(팀) %>% summarise_each(funs(mean,n()),경기,타수)
data1 %>% group_by(팀) %>% summarise_each(funs(mean),경기,타수)    # 팀별 경기,타수 평균
select(data,경기,타수수)
select(data,경기,타수)
select(data1,경기,타수)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400) %>% arrange(desc(타수))
select(data11,-순위,-타수)
select(data1,-순위,-타수)
select(data1,순위:타수)
select(data1,포지션:타수)
select(data1,-포지션,-타수)
data1 %>% select(선수명,팀,경기,타수) %>% filter(타수>400) %>% arrange(desc(타수),desc(경기))
data1 %>% select(선수,팀,출루율,장타율) %>% mutate(출루율+장타율=OPT) %>% arrange(decs(OPS))
data1 %>% select(선수,팀,출루율,장타율) %>% mutate(출루율+장타율=OPT) %>% arrange(decs(OPS))
data1 %>% select(선수,팀,출루율,장타율)
data1 %>% select(선수,팀,출루율,장타율)
data1 %>% select(선수명,팀,출루율,장타율) %>% mutate(출루율+장타율=OPT) %>% arrange(decs(OPS))
data1 %>% select(선수명,팀,출루율,장타율) %>% mutate(OPT=출루율+장타율) %>% arrange(decs(OPS))
data1 %>% select(선수명,팀,출루율,장타율) %>% mutate(OPT=출루율+장타율) %>% arrange(desc(OPS))
data1 %>% select(선수명,팀,출루율,장타율) %>% mutate(OPS=출루율+장타율) %>% arrange(desc(OPS))
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data %>% group_by(팀) %>% summarise_each(list(mean),na.rm=T)
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data %>% group_by(팀) %>% summarise_each(list(mean),경기)
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data %>% group_by(팀) %>% summarise_each(list(mean),경기,타수)
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data1 %>% group_by(팀) %>% summarise_each(list(mean),경기,타수)
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data1 %>% group_by(팀) %>% summarise_each(list(mean,n()),경기,타수,na.rm=T)
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data1 %>% group_by(팀) %>% summarise_each(list(mean,n()),경기,타수)
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data1 %>% group_by(팀) %>% summarise_each(list(mean),경기,타수)
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data1 %>% group_by(팀) %>% summarise_each(list(mean,n()),경기,타수)
# funs = deprecated : 지금은 사용할 수 잇지만 앞으로 우리 함수는 제외할거다.
# 그러니까 funs 사용을 자제 해주세요 대신 list를 사용해주세요 (version up)
data1 %>% group_by(팀) %>% summarise_each(list(mean),경기,타수)
attach(Fruits)
library(googleVis)
attach(Fruits)
data %>% Filter(Expenses>80)
Fruits %>% Filter(Expenses>80)
Fruits
Fruits <- Filter(Expenses>80)
Fruits <- filter(Expenses>80)
filter(Frutis,Expenses>80)
Fruits1 <- filter(Fruits,Expenses>80)
Fruits1 <- filter(Fruits,Expenses>80) ; Fruits1
Fruits %>% filter(Expenses>80)
Fruits %>% filter(Expenses>90,Sales>90)
Fruits %>% filter(Expenses>90 | Sales>90)
Fruits %>% filter(Expenses>90 | Sales>80)
Fruits %>% filter(Expenses==79 | Sales==91)
Fruits %>% filter(Expenses==79,91)
Fruits %>% filter(Expenses==c(79,91))
Fruits %>% filter(Expenses==79 | Expenses==91)
Fruits %>% select(Fruit:Sales,-Location)
data1 %>% group_by(팀) %>% summarise(avarage = mean(경기,na.rm=T))  # 팀별 경기평균 na.rm=T
Fruits %>% group_by(fruit) %>% summarise(average=sum(average,na.rm=T))
Fruits %>% group_by(Fruit) %>% summarise(average=sum(average,na.rm=T))
Fruits %>% group_by(Fruit) %>% summarise(avarage=sum(avarage,na.rm=T))
Fruits
Fruits %>% group_by(Fruit) %>% summarise(avarage=sum(Sales,na.rm=T))
Fruits %>% group_by(Fruit) %>% summarise_each(funs(sum,n()),Sales,Profit)
Fruits %>% filter(Expenses==79,91)
Fruits %>% filter(Expenses==79 | Expenses==91)
data1 %>% group_by(팀) %>% summarise_each(funs(mean,n()),경기,타수) # n()은 mean을 구하기위한 /n의 갯수.
Fruits %>% group_by(Fruit) %>% summarise_each(funs(sum,n()),Sales,Profit)
