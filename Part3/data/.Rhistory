# 4번 정답 : 밑에 코드
newdata <- mpg %>%
select(class,cty) %>%
head(10)
newdata
# 5번 정답 : compact가 20.12766으로 더 높다.
suv     <- mpg %>%
filter(class %in% 'suv')     ; mean(suv$cty)
compact <- mpg %>%
filter(class %in% 'compact') ; mean(compact$cty)
# 5번 정답 : compact가 20.12766으로 더 높다.
suv     <- mpg %>%
filter(class %in% 'suv') %>%
summarise(average=mean(cty))
suv
compact <- mpg %>%
filter(class %in% 'compact') %>%
summarise(average=mean(cty))
compact
# 6번
audi <- mpg %>%
filter(manufacturer == 'audi') %>%
arrange(desc(hwy)) %>%
head(5)
audi
# 7번_3 :
mpgcopy <- mpgcopy %>%
elect(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_2 : 평균 연비 변수
mpgcopy <- mpgcopy %>%
mutate(평균연비변수 = 합산연비변수/2)
# 7번_1 : 합산 연비 변수
mpgcopy <- mpg #복사본
mpgcopy <- mpg %>%
mutate(합산연비변수 = cty+hwy)
# 7번_2 : 평균 연비 변수
mpgcopy <- mpgcopy %>%
mutate(평균연비변수 = 합산연비변수/2)
# 7번_3 :
mpgcopy <- mpgcopy %>%
elect(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_1 : 합산 연비 변수
mpgcopy <- mpg #복사본
mpgcopy <- mpg %>%
mutate(합산연비변수 = cty+hwy)
# 7번_2 : 평균 연비 변수
mpgcopy <- mpgcopy %>%
mutate(평균연비변수 = 합산연비변수/2)
# 7번_3 :
mpgcopy <- mpgcopy %>%
elect(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_3 :
mpgcopy <- mpgcopy %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_3 :
mpgcopy <- mpgcopy %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
mpgcopy
# 7번_4 :
mpg %>%
mutate(합산연비변수 = cty+hwy) %>%
mutate(평균연비변수 = 합산연비변수/2) %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_4 :
mpg %>%
mutate(합산연비변수 = cty+hwy) %>%
mutate(평균연비변수 = 합산연비변수/2) %>%
select(class,합산연비변수,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
install.packages("reshape2")
library(reshape)
library(reshape2)
fruits
melt(fruits,id='year')
melt(fruits,id='year')
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name',variable.name='변수명',value.name='변수값'))
melt(fruits,id=c('year','name',variable.name='변수명',value.name='변수값')
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명)
dcast(mtest,name~변수명,sum)
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
dcast(mtest,name~변수명,sum,subset=(name=='apple'))
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,name~변수명,sum,subset=.(name=="apple"))
dcast(mtest,name~변수명,sum,subset=.(name=="apple"))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,name~변수명,sum,subset=.(name=="apple"))
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=="apple"))
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
dcast(mtest,name~변수명,sum,subset=(name=='apple'))
dcast(mtest,name~변수명,sum,subset=.(name='apple'))
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
install.packages(strigr)
install.packages(stringr)
install.packages(stringr)
install.packages('stringr')
install.packages("stringr")
library(stringr)
fruits <- c('apple','Apple','banana','pineapple')
fruits
str_detect(fruits,'A')
str_detect(fruits,'^a')
str_detect(fruits,'^[aA]') # 시작하는단어가 대문자 A나 소문자 a인 단어 찾기
library(plyr)
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
library(reshape2)
library(plyr)
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
library(plyr)
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
install.packages('stringr')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
fruits
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
library(reshape2)
library(plyr)
fruits
fruits
library(reshape2)
library(plyr)
fruits
library(googleVis)
fruits
fruits
library(reshape2)
library(plyr)
fruits
library(googleVis)
library(googleVis)
attach(Fruits)
fruits
Fruits
melt(Fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
fruits
library(reshape2)
library(plyr)
fruits
fruits <- c('apple','Apple','banana','pineapple')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
fruits<-read.csv('fruits_10.csv')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
install.packages('stringr')
install.packages("stringr")
library(stringr)
fruits <- c('apple','Apple','banana','pineapple')
str_detect(fruits,'A')     # 대문자 A가 있는 단어
str_detect(fruits,'^a')    # 첫글자가 소문자 a
str_detect(fruits,'e$')    # 끝나는 글자가 소문자 e인 단어 찾기.
str_detect(fruits,'^[aA]') # 시작하는단어가 대문자 A나 소문자 a인 단어 찾기
str_detect(fruits,'[aA]')  # 단어에 소문자 a와 대문자 A가 들어 있는 단어 찾기.
str_detect(fruits,ignore.case('a'))
fruits <- c('apple','Apple','banana','pineapple')
str_detect(fruits,ignore.case('a'))
str_detect(fruits,ignore.case(a))
str_detect(fruits,regex('a',ignore_case=T))
str_count(fruits,ignore.case('a'))
str_count(fruits,'a')
str_count(fruits,regex('a',ignore_case=T))
str_c("apple","banana")
str_c("Fruits: ",fruits)
str_c(fruits," name is ",fruits)
str_c(fruits,collapse="")
str_c(fruits,collapse="-")
str_dup(fruits,3)
str_length('apple')
str_length(fruits)
str_locate('apple','a')
str_length('과일일')
str_length('과일')
str_locate(fruits,'a')
str_locate('apple','app')
str_locate('apple','app')
str_locate(fruits,'a')
str_replace('apple','p','*')
str_replace('apple','p','*')  #문자 바꾸기
str_replace('apple','p','++')
str_replace_all('apple','p','*')
fruits <- str_c('apple','/','banana','/','orange')
str_split(fruits,"/")
str_sub(fruits,start=1,end=3)
str_sub(fruits,start=6,end=9)
str_sub(fruits,start=-5)
str_sub(fruits,start=1,end=3) # "app"
str_sub(fruits,start=6,end=9) # "/ban"
str_sub(fruits,start=-5)      # -는 뒤에서부터 시작.
str_sub(fruits,start=-5,end=-10)
str_sub(fruits,start=-5,end=10)
str_sub(fruits,start=-5,end=-3)
str_sub(fruits,start=-5,end=-1)
str_sub(fruits,start=-5,end=-2)
str_sub(fruits,start=-5,end=-3)
str_sub(fruits,start=-5,end=-8)
str_trim('\t apple banana berry ')
str_trim('   apple banana berry  \n   apple banana berry  ')
str_sub(a,1,3)
str(a,1,3)
str_sub(a,1,3)
library(stringr)
a<-20190603
str_sub(a,1,3)
substr(a,1,3)
library(plyr)
fruits <- read.csv("fruits_10.csv") ;fruits
ddply(fruits,'name',summarise,sum_qty=sum(qty),sum_price=sum(price))
print(3) ; print(1+2) ; print('a') ; a<-3 ; print(a+3) ; print(pi)
print(3)
print(3) ; print(1+2)
print(3) ; print(1+2) ; print('a')
print(3) ; print(1+2) ; print('a') ; a<-3 ; print(a+3)
print(3) ; print(1+2) ; print('a') ; a<-3 ; print(a+3) ; print (pi)
print(3) ; print(1+2) ; print('a') ; a<-3 ; print(a+3) ; print (pi,digits=4)
cat(1)
cat(1,'\n','a')
cat(1,':','a','\n',2,':','b') #\n 줄바꾸기.
cat(1,'\n',2,'\n',3,'\n',4)
cat(1,':','a','\n',2,':','b') #\n 줄바꾸기.
cat(1,'\n',2,'\n',3,'\n',4)
as.numeric('1')+as.numeric('3') #숫자처럼 보이는 문자를 숫자로 변경해주는 명령어
as.numeric('a')+as.numeric('3') #숫자처럼 보이는 문자를 숫자로 변경해주는 명령어
# $ (and, *, 둘다), | (or, +, 둘중 하나라도), ! (not, 반대)
3&0; 3&1; 3&2; 3|0; 3|1; !0; !1; !3
print(5%/%2) #나눗셈의 몫
print(5%%2)  #나눗셈의 나머지 ( [x%%3=0]의 식을 이용해서 x값이 3의 배수인지 확인가능.)
'first' ; "first" ; first #앞의 2개는 문자, 뒤 first는 변수(x) 이름으로 인식이 된다.
as.numeric('1')+as.numeric('3') #숫자처럼 보이는 문자를 숫자로 변경해주는 명령어
class(1) ; class('1') # 문자,숫자인지 알려준다. (Data Type : numeric, character, logical, NA, NULL, Factor)
# $ (and, *, 둘다), | (or, +, 둘중 하나라도), ! (not, 반대)
3&0; 3&1; 3&2; 3|0; 3|1; !0; !1; !3
# $ (and, *, 둘다), | (or, +, 둘중 하나라도), ! (not, 반대)
3&0; 3&1; 3&2; 3|0; 3|1; !0; !1; !3
# $ (and, *, 둘다), | (or, +, 둘중 하나라도), ! (not, 반대)
3&0; 3&1; 3&2; 3|0; 3|1; !0; !1; !3
3|0; 3|1; 3|3; # | (or는 더하기, 둘중 하나라도)
3|0; 3|1; 0|0; # | (or는 더하기, 둘중 하나라도)
cat(1,NA,2) ; cat(1,NULL,2)
sum(1,NA,2) ; sum(1,NULL,2)
sum(1,NA,2,na.rm=T) #na.rm=T는 결측치를 없애준다.
setwd("D:/dudwlsrla92/R_Data_Analysis/Part3/data")
txt1<-read.csv("factor_test.txt")
factor1<-factor(txt1$blood) #factor 범주형 데이터
factor1
txt1$blood
txt1$sex
gender1<-factor(txt1$sex)
gender1
summary(factor1)
summary(gender1)
factor1<-factor(txt1$blood) #factor 범주형 데이터
gender1<-factor(txt1$sex)
summary(factor1)
summary(gender1)
View(txt1)
stringsAsFactors=FALSE
stringsAsFactors=FALSE
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
library(lubridate)
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
library(lubridate)
install.packages("lubridate")
library(lubridate)
install.packages("lubridate")
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
library(dplyr)
('dplyr')
('dplyr')
install.packages('dplyr')
library(dplyr)
install.packages("lubridate")
install.packages("lubridate")
library(lubridate)
now()         #현재날짜와 시간
date <- now() #변수 date에 입력
year(date)
month(date)
day(date)
wday(date)    #일요일 = 1
wday(date, label=T) #label=T 글자로 표시
month(date) <- 2; date
day(date) <- 3; date
date <- date - days(2); date
date+years(1)
date+months(1)
date+years(1)
date+months(1)
date+days(1)
date+hours(1)
date+minutes(1)
date+seconds(1)
date <- hm("22:30") ; date #시간 분 지정하기
a <- read.csv('urls.txt')
setwd("D:/dudwlsrla92/R_Data_Analysis/R-Lecture/Part3/data")
a<- read.csv('urls.txt')
a
txt1<-read.csv("factor_test.txt")
class(a)
a<- readLines('urls.txt')
class(a)
a
install.packages('stringr')
install.packages('stringr')
install.packages("stringr")
library(stringr)
a
a<- readLines('urls.txt')
a
str_detect(a,-'tag')
str_detect(a,'-tag')
a2<-str_detect(a,'-tag')
a2
a2<-str_detect(a,'tag')
a2
a2<-str_detect(a,'tag')
a2
a2<-str_detect(a,-'tag')
a2<-str_detect(a,'-tag')
a2
a2<-str_detect(a,'tag')
a2
a3<-str_detect(a,'article')
a3
a[a3]
a3<-str_detect(a,'economy/article')
a[a3]
b[a3]
a[3]
a[,3]
a[3]
a[3,]
class(a)
a[a3]
b<- read.csv('1-4호선승하차승객수.csv')
b
b1 <- str_c(0,b$시간)
class(b$시간)
class(b$시간)
as.numeric(b$시간)
b1 <- as.numeric(b$시간)
b1
b2 <- str_c(0,b$시간)
b2
b2 <- str_sub(b1,1,3)
b2
b  <- read.csv('1-4호선승하차승객수.csv')
b
b  <- b$시간(!000)
b  <- read.csv('1-4호선승하차승객수.csv')
b1  <- b$시간(!000)
<- b$시간(!000)
b  <- read.csv('1-4호선승하차승객수.csv')
b1  <- b$시간(!000)
b1
b  <- read.csv('1-4호선승하차승객수.csv')
b1  <- b$시간(0000)
b1
b1  <- b$시간(n*1000)
b1  <- b$시간(nnn)
b1  <- b$시간('nnn')
b1 <- length(b$시간)
length(b$시간)
b1 <- subset(b,nchar==3)
b  <- read.csv('1-4호선승하차승객수.csv')
b1 <- subset(b,b$시간==nchar(3))
b1
nchar
nchar(apple)
nchar(b)
b1 <- subset(b,nchar(b$시간==3))
nchar(b$시간==3)
b  <- read.csv('1-4호선승하차승객수.csv')
b
nchar(b$시간)
nchar(b$시간=='3')
nchar(b$시간)==3
b[b2]
b2 <- nchar(b$시간)==3
b[b2]
b2 <- nchar(b$시간)==3
b2
a3<-str_detect(a,'economy/article')
a[a3]
a3
b[,b2]
b[b2,]
b3 <- b[b2,]
b4 <- str_c(0,b3$시간)
b4
b3 <- b[b2,]
b4 <- str_c(0,b3$시간)
b4
b[b4]
b[,b4]
b4
b1
b1 <- subset(b,nchar(b$시간==3))
b2 <- nchar(b$시간)==3
b2
b3
b4
b2[b3]
b2 <- nchar(b$시간)==3
b[nchar(b$시간)==3,]
b[nchar(b$시간)==3,] <- b4
b4
b[nchar(b$시간)==3,] <-str_c(0,b3$시간)
b
b[nchar(b$시간)==3,2] <-str_c(0,b3$시간)
b
b  <- read.csv('1-4호선승하차승객수.csv')
b[nchar(b$시간)==3,2] <-str_c(0,b3$시간)
b
str_c(0,b3$시간)
b[nchar(b$시간)==3,2]
b2
nchar(b$시간)
a[a3]
b2 <- b[nchar(b$시간)==3,]
b[nchar(b$시간)==3,2] <- str_c(0,b2$시간)
b[nchar(b$시간)==3,2] <- str_c(0,b[nchar(b$시간)==3,]$시간)
b  <- read.csv('1-4호선승하차승객수.csv')
b[nchar(b$시간)==3,2] <- str_c(0,b[nchar(b$시간)==3,]$시간)
b
str_c(0,b[nchar(b$시간)==3,]$시간)
b[nchar(b$시간)==3,]$시간
b  <- read.csv('1-4호선승하차승객수.csv')
b[nchar(b$시간)==3,2] <- str_c(0,b[nchar(b$시간)==3,]$시간)
b  <- read.csv('1-4호선승하차승객수.csv')
b[nchar(b$시간)==3,2] <- str_c(0,b[nchar(b$시간)==3,]$시간)
b
b[nchar(b$시간)==3,]
nchar(b$시간)==3
nchar(b$시간)==3
b  <- read.csv('1-4호선승하차승객수.csv')
nchar(b$시간)==3
b[nchar(b$시간)==3,]
b[nchar(b$시간)==3,]$시간
str_c(0,b[nchar(b$시간)==3,]$시간)
b  <- read.csv('1-4호선승하차승객수.csv')
b[nchar(b$시간)==3,2] <- str_c(0,b[nchar(b$시간)==3,])
b[nchar(b$시간)==3,]
b  <- read.csv('1-4호선승하차승객수.csv')
b[nchar(b$시간)==3,]
b  <- read.csv('1-4호선승하차승객수.csv')
b[nchar(b$시간)==3,2] <- str_c(0,b[nchar(b$시간)==3,2])
b
