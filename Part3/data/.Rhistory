fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2 #
fruits  <- read.table('fruits.txt')            ; fruits
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2 #
fruits  <- read.table('fruits.txt')            ; fruits
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
f2top   <- read.table('fruits_2.txt',nrows=2)  ; f2top
f2bottom<- read.table('fruits_2.txt',skip=3)   ; f2bottom
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2 #
fruits2 <- read.table('fruits_2.txt',nrows=2)  ; fruits2
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 #
fruits4 <- read.table('fruits_2.txt',nrows=2)  ; fruits4
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 #
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 #
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
f2top   <- read.table('fruits_2.txt',nrows=2)  ; f2top
f2bottom<- read.table('fruits_2.txt',skip=3)   ; f2bottom
f2bottom<- read.table('fruits_2.txt',skip=3)   ; f2bottom
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 #
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',header=F)          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 # SKIP은 #과 같은 주석이 포함되어 제거된다.
fruits5 <- read.csv('fruits_3.csv')
fruits5 <- read.csv('fruits_3.csv') ; fruits5
fruits6 <- read.csv('fruits_4.csv') ; fruits6
fruits6 <- read.csv('fruits_4.csv',header=F) ; fruits6
fruits  <- read.table('fruits.txt')            ; fruits
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
label <- c('NO','NAME','PRICE','QTY')
fruit7 <- read.csv('fruits_4.csv',header=F,col.names=label)
fruit7
fruits6 <- read.csv('fruits_4.csv',header=F) ; fruits6
fruits5 <- read.csv('fruits_3.csv') ; fruits5 #데이터사이에 쉼표(,)가 있으면 편하다.
fruits6 <- read.csv('fruits_4.csv') ; fruits6 #txt와 다르게 csv는 header=T가 default 되어있음.
fruits6 <- read.csv('fruits_4.csv',header=F) ; fruits6
label  <- c('NO','NAME','PRICE','QTY')
fruit7 <- read.csv('fruits_4.csv',header=F,col.names=label)
fruit7
install.packages('googleVis')
library(googleVis)
install.packages("sqldf")
library(sqldf)
library(sqldf)
Fruits
write.csv(Fruits, 'Frits_sql.csv',quote=F,row.names=F)
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT*FROM file WHERE YEAR = 2008')
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008')
write.csv(Fruits, 'Frits_sql.csv',quote=F,row.names=F) #quote:문자열 표시 생략/ row 행 번호 제거.
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008')
write.csv(Fruits, 'Fruits_sql.csv',quote=F,row.names=F) #quote:문자열 표시 생략/ row 행 번호 제거.
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008')
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008') ; fruits_2
install.packages("XLConnect")
library(XLConnect)
data=loadWorkbook('fruits_6.xls',create=T)
data1=loadWorkbook('fruits_6.xls',create=T)
data2=readWorksheet(data1,sheet="sheet1",startRow=1,endRow=8,startCol=1,endCol=5)
data2
fruits6 <- read.delim("clipboard",header=T)
fruits6
data1 <- loadWorkbook('fruits_6.xls',create=T)
data1
install.packages("readxl")
library(readxl)
cust_profile <- read_excel('fruits_6.xls',       # path
+sheet = "sheet1",    # sheet name to read from
+range = "A2:D6",     # cell range to read from
+col_names = TRUE,    # TRUE to use the first row as column names
+col_types = "guess", # guess the types of columns
+na = "NA")           # Character vector of strings to use for missing values
fruits7 <- read_excel('fruits_6.xls',       # path
+sheet = "sheet1",    # sheet name to read from
+range = "A2:D6",     # cell range to read from
+col_names = TRUE,    # TRUE to use the first row as column names
+col_types = "guess", # guess the types of columns
+na = "NA")           # Character vector of strings to use for missing values
fruits7 <- read.excel('fruits_6.xls',       # path
+sheet = "sheet1",    # sheet name to read from
+range = "A2:D6",     # cell range to read from
+col_names = TRUE,    # TRUE to use the first row as column names
+col_types = "guess", # guess the types of columns
+na = "NA")           # Character vector of strings to use for missing values
fruits7 <- read_excel('fruits_6.xls',       # path
sheet = "sheet1",    # sheet name to read from
range = "A2:D6",     # cell range to read from
col_names = TRUE,    # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA")           # Character vector of strings to use for missing values
fruits7 <- read_excel('fruits_6.xls',       # path
sheet = "Sheet1",    # sheet name to read from
range = "A2:D6",     # cell range to read from
col_names = TRUE,    # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA")           # Character vector of strings to use for missing values
fruits7
fruits7 <- read_excel('fruits_6.xls',        # path
sheet     = "Sheet1", # sheet name to read from
range     = "A2:D6",  # cell range to read from
col_names = TRUE,     # TRUE to use the first row as column names
col_types = "guess",  # guess the types of columns
na = "NA")            # Character vector of strings to use for missing values
fruits_2 <- subset(Fruits, Fruits$Year=2008)
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008') ; fruits_2
Fruits
write.csv(Fruits, 'Fruits_sql.csv',quote=F,row.names=F) #quote:문자열 표시 생략/ row 행 번호 제거.
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008') ; fruits_2
library(googleVis)
library(sqldf)
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008') ; fruits_2
fruits_2 <- subset(Fruits, Fruits$Year=2008)
fruits_2
fruits_2 <- subset(Fruits, Fruits$Year=2008)
?subset()
??ggplot2
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
max(vec1)
max(vec1) ; max(vec2)
mean(vec1)
mean(vec2)
min(vec1)
sd(vec1)
sum(vec1)
var(vec1)
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
max(vec1); min(vec1); sum(vec1)
mean(vec1); sd(vec1); var(vec1)
max(vec2)  # 사전 순서로 뒤의 것(e)이 나옴
library(googleVis)
Fruits
aggregate(Sales~Year,Fruits,sum) #년도별 계산 총액
aggregate(Sales~Year,Fruits,max)
aggregate(Sales~Year,Fruits,mean())
aggregate(Sales~Year,Fruits,mean)
aggregate(Sales~Year,Fruits,sum) #년도별 판매 총액
aggregate(Sales~Year,Fruits,max)
aggregate(Sales~Year,Fruits,mean)
aggregate(Sales~Fruits,Fruits,sum)
aggregate(Sales~Fruit,Fruits,sum)
aggregate(Sales~Fruit+Year,Fruits,sum)
aggregate(Sales~Fruit,Fruits,sum)
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T)
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) ; mat1
apply(mat1,1,sum)
apply(mat1,1,sum)
apply(mat1,2,sum)
apply(mat1,1,prod)
apply(mat1[,c(2,3),1,sum])
apply(mat1[,c(2,3)],1,sum)
list1 <- list(Fruits$Sales)
list1
lapply(c(list1,list2),max)
lapply(c(list1,list2),max))
lapply(c(list1,list2),max)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)
sapply(c(list1,list2),max)
lapply(c(list1,list2),max)
sapply(c(list1,list2),max)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max) #list의 형태로 출력
lapply(c(list1,list2),max) #
sapply(c(list1,list2),max) #Vector의 형태로 출력.
lapply(Fruits[,c(4,5)],max)
Fruits
sapply(Fruits[,c(4,5)],max)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)  #
sapply(c(list1,list2),max)  #Vector의 형태로 출력.
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
attach(Fruits)
tapply(Sales, Fruit, sum)
vec1 <- c(1:5)
vec2 <- c(10:50:100)
vec2 <- seq(10,50,10)
vec3 <- seq(100,500,100)
mapply(sum,vec1,vec2,vec3)
data1 <- read.csv('data1.csv')
data1 <- read.csv('data1.csv')
data1 <- read.csv('data1.csv')
data1 <- read.csv('data1.csv')
data1
aggregate(~data1$연령별,data1,sum)
Fruits
data1
aggregate(data1$연령별~,data1,sum)
aggregate(연령별~,data1,sum)
aggregate(연령별~data1[,],data1,sum)
aggregate(연령별~data1$X2000년,data1,sum)
data1 <- read.csv('data1.csv')
aggregate(연령별~data1$X2000년,data1,sum)
Fruits
apply(mat1,1,sum)          # 1 - 행 단위 계산
apply(data1,2,sum)
apply(data1,2,sum)
data1 <- read.csv('data1.csv')
apply(data1,2,sum)
apply(data1,1,sum)
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)  #
sapply(c(list1,list2),max)  #Vector의 형태로 출력.
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
tapply(Sales, Fruit, sum)
Fruits
mapply(sum,vec1,vec2,vec3)
aggregate(data1$X2000년~연령별,data1,sum)
aggregate(data1~연령별,data1,sum).
aggregate(data1~연령별,data1,sum)
aggregate(data1$연령별~연령별,data1,sum)
apply(data1,1,sum)          # 1 - 행 단위 계산
apply(data1,2,sum)          # 1 - 행 단위 계산
lapply(Fruits[,c(4,5)],max)
lapply(data1[,],sum)
lapply(data1,sum)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)  #
sapply(c(list1,list2),max)  #Vector의 형태로 출력.
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
attach(Fruits)
tapply(Sales, Fruit, sum)
aggregate(data1$연령별~data1[1,],data1,sum)
aggregate(~data1[1,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
data1[1,]
aggregate(data1[,]~data1$연령별,data1,sum)
aggregate(data1[c(1:5),]~data1$연령별,data1,sum)
(1:5)
aggregate(data1[c(1:5),]~data1$연령별,data1,sum)
c(1:5)
aggregate(data1[,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
aggregate(data1[,2]~data1$연령별,data1,sum)
aggregate(data1[,1]~data1$연령별,data1,sum)
aggregate(data1[2,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
data1[1,]
data1$연령별
aggregate(data1$연령별~data1[1,],data1,sum)
aggregate(Sales~Year,Fruits,sum) #년도별 판매 총액
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) ; mat1
apply(mat1,1,sum)          # 1 - 행 단위 계산
apply(mat1,2,sum)          # 2 - 열 단위 계산
apply(mat1,1,sum)          # 1 - 행 단위 계산
apply(mat1,2,sum)          # 2 - 열 단위 계산
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) ; mat1
apply(mat1,2,sum)          # 2 - 열 단위 계산
apply(data1,2,sum)
apply(data1,2,sum)
tapply(data1$연령별,data1,sum)
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
attach(Fruits)
mapply(sum,data1)
mapply(sum,data1[,1])
mapply(sum,data1[,c(2)])
mapply(sum,data1[,c(2:13)])
mapply(sum,data1[,c(2:15)])
mapply(sum,data1[,c(2:15)])
mapply(sum,data1[c(1:5),])
aggregate(data1[,c(2:15)]~data1$연령별,data1,sum)
aggregate(data1[,c(2:15)]~data1$연령별,data1,sum)
data1[,c(2:15)]
data1$연령별
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
apply(data1,2,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],1,sum)
apply(data1[,c(2:15)],1,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(노선번호~승차,data2,sum)
data2
aggregate(승차~노선번호,data2,sum)
tapply(노선번호,승차,sum)
attach(data2)
tapply(노선번호,승차,sum)
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(노선번호~승차+하차,data2,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(노선번호~승차+하차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
data2
aggregate(data2$노선번호~승차+하차,data2,sum)
aggregate(data2$노선번호~data$승차+data$하차,data2,sum)
aggregate(data2$노선번호~data$승차+data$하차,data2,sum)
aggregate(data2$노선번호~data$승차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
aggregate(노선번호~승차+하차,data2,sum)
aggregate(Sales~Fruit,Fruits,sum)
aggregate(승차~노선번호,data1,sum)
aggregate(승차~노선번호,data2,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(승차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
aggregate(승차+하차차~노선번호,data2,sum)
aggregate(승차+하차~노선번호,data2,sum)
data1 <- read.csv('data1.csv')
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data1 <- read.csv('data1.csv')
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,-1])
apply(data1[,-1],2,sum)
apply(data1[,-1],1,sum)
mapply(sum,data1[,-1])
apply(data1[,-1],2,sum)
apply(data1[,-1],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
sapply(data2[,c(3,4)],sum)
apply(data2[,c(3,4)],2,sum)
Fruits
aggregate(Sales~Year,Fruits,sum) #년도별 판매 총액
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mat <- matrix(c(1:6),dim(3:2))
mat <- matrix(c(1:6),dim(2,3))
mat <- matrix(c(1:6),dim(3,2))
mat <- matrix(c(1:6),nrow=2)
mat
mat <- matrix(c(1:6),nrow=2,byrow=T)
mat
a   <- c(1,1,1)
weep(mat1,2,a)
sweep(mat1,2,a)
a   <- rep(1,3)
sweep(mat1,2,a)
mat <- matrix(c(1:6),nrow=2,byrow=T)
a   <- rep(1,3)
sweep(mat1,1,a)
sweep(mat1,2,a)
b   <- matrix(c(2,2))
b
sweep(mat1,1,b)
library(googleVis)
length(Fruits)
Fruits
ceiling(2.3)
floor(2.3)
abs(-1)
ceiling(-2.3)
floor(-2.3)   # -3.
floor(-2.3)   # -3
round(2.5)
round(2.51)
round(2.4)
choose(5,3)
myfunc <- function(){
return(10)
}
myfunc
myfunc()
myfunc2 <- function(x) {
y = x * x ;
return(y)
}
myfunc2()
myfunc2(-3)
func_test <- function(x,y){
z = x-y
return(z)
}
func_test(3,2)
func_test(2,3)
func_test <- function(x,y){
abs(z) = x-y
return(z)
}
func_test(3,2)
func_test <- function(x,y){
z = x-y
return(abs(z))
}
func_test(3,2)
func_test(2,3)
library(plotly)
library(dplyr)
n <- 10000
theta <- runif(n,0,2*pi)
u0 <- runif(n,-1,1)
x0 <- sqrt(1-u0^2)*cos(theta)
y0 <- sqrt(1-u0^2)*sin(theta)
z0 <- u0
sphere1 <- data.frame(x=x0*2+5,y=y0*2+5,z=z0*2+2)
sphere2 <- data.frame(x=x0+5,y=y0+5,z=z0+5)
sphere <- rbind(sphere1, sphere2)
sphere$colors <-c('#f2f2f2')
sphere$symbol <-c('circle')
sphere$size <- 10
plot_ly(sphere, x = ~x, y = ~y, z = ~z,
marker=list(size= ~sphere$size, opacity=.9, color=sphere$colors, symbol=sphere$symbol)) %>% layout(paper_bgcolor='rgb(193, 222, 255)')  %>% layout(title = 'Snow Man')
# make nose and eye
x <- c(5,5,
rep(5, length(seq(5.2,5.3,.02))),5.2,4.8, # nose and eye
3.5,6.5)
y <- c(5,6,
seq(5.2,5.3,.02),5.2,5.2, # nose and eye
6.5,3.5)
z <- c(1.2,1.1,
rep(5.1, length(seq(5.2,5.3,.02))),5.315,5.315, # nose and eye
1.12,1.12)
size <-c(1,1,
rep(10, length(seq(5.2,5.3,.02))),10,10, # nose and eye
1,1)
colors <-c('#ffffff','#ffffff',
rep('#f97c00', length(seq(5.2,5.3,.02))),'#3a3a3a','#3a3a3a', # nose and eye
'#ffffff','#ffffff')
symbol <-c('circle','circle',
rep('circle', length(seq(5.2,5.3,.02))),'circle','circle',
'circle','circle')
face <- data.frame(x,y,z,size,colors,symbol)
plot_ly(face, x = ~x, y = ~y, z = ~z,
marker=list(size= ~ face$size, opacity=.9, color= face$colors, symbol= face$symbol)) %>% layout(paper_bgcolor='rgb(193, 222, 255)')  %>% layout(title = 'Snow Man')
# make smile
x1 <- seq(-pi,0,.2)
z1 <- sin(x1)*.1
x2 <- (x1*-.1)+4.85
z2 <- z1+4.6
y2 <- rep(5.2,length(z2))
smile <- data.frame(x=x2,y=y2,z=z2, size=rep(8, length(z2)), colors=rep(c('#f90000'),length(z2)), symbol=rep(c('circle'),length(z2)))
# make smile face
smile_face <- rbind(face, smile)
plot_ly(smile_face, x = ~x, y = ~y, z = ~z,
marker=list(size= ~smile_face$size, opacity=.9, color=smile_face$colors, symbol=smile_face$symbol)) %>% layout(paper_bgcolor='rgb(193, 222, 255)')  %>% layout(title = 'Snow Man')
# snow man !!
snowman <-rbind(sphere, face, smile)
p <- plot_ly(snowman, x = ~x, y = ~y, z = ~z,
marker=list(size= ~snowman$size, opacity=.9, color=snowman$colors, symbol=snowman$symbol)) %>% layout(paper_bgcolor='rgb(193, 222, 255)')  %>% layout(title = 'Snow Man')
p
# merry christmas!
Sys.setenv("plotly_username"="XXXX")
Sys.setenv("plotly_api_key"="XXXX")
plotly_POST(p, filename = "snow_man_xmas")
