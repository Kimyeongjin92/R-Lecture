mat1 <- matrix(c(1,2,3,4))                ;mat1
mat2 <- matrix(c(1,2,3,4),nrow=2)         ;mat2 #nrow = 행의 갯수(세로입력)
mat3 <- matrix(c(1,2,3,4),nrow=2,byrow=T) ;mat3 #byrow  가로입력순서
mat4 <- matrix(seq(1:9),nrow=3,byrow=T)   ;mat4
mat4[,1]  # 모든 행의 1열값
mat4[1,]  # 모든 열의 1행값
mat4[1,1] # [1행, 1열]
mat4 <- rbind(mat4,c(10,11,12))    ;mat4 #rbind 행 추가
mat4 <- cbind(mat4,c(13,14,15,16)) ;mat4 #cbind 열 추가
mat5 <- matrix(c('a','b','c','d'),nrow=2,byrow=T)
mat5 <- cbind(mat5, c('e','f'))
colnames(mat5) <- c('First','second','third')
mat5
mat5 <- name(mat5, 나=First)
mat5 <- rename(mat5, 나=First)
library(dplyr)
mat5 <- rename(mat5, 나=First)
mat5 <- rename(mat5, 나=First)
mat5
library(dplyr)
mat5 <- rename(mat5, 나=First)
mat5 <- rename_all(mat5, 나=First)
colnames(mat5) <- c('First','second','third')
mat5 <- rename_all(mat5, 나=First)
mat5 <- rename_all(mat5, First=나)
colnames(mat5) <- c('First','second','third')
mat5 <- rename_all(mat5, a=First)
mat5 <- rename(mat5, a=First)
library(reshape2)
fruits<-read.csv('fruits_10.csv')
###===============================================================================
### reshape2() melt dcast 함수  ==========================================
###===============================================================================
setwd('D:/dudwlsrla92/R_Data_Analysis/Part3/data')
library(reshape2)
fruits<-read.csv('fruits_10.csv')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
fruits
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
setwd("D:/dudwlsrla92/Assignment/[과제 7] 그래프 도전미션")
getwd()
baseball <- read.csv('주요선수별성적-2013년.csv',stringsAsFactors=F)
baseball
# 2) 나이팅게일 차트 coor_polar() =================================================
baseball2 <-baseball %>%
mutate(OPS=출루율+장타율) %>%
mutate(연봉대비OPS율=round(OPS/연봉,1)) %>%
select(선수명,홈런,안타,득점,출루율,타율,볼넷,도루,타점)
# 2) 나이팅게일 차트 coor_polar() =================================================
baseball2 <-baseball %>%
mutate(OPS=출루율+장타율) %>%
mutate(연봉대비OPS율=round(OPS/연봉,1)) %>%
select(선수명,홈런,안타,득점,출루율,타율,볼넷,도루,타점)
library(dplyr)
# 2) 나이팅게일 차트 coor_polar() =================================================
baseball2 <-baseball %>%
mutate(OPS=출루율+장타율) %>%
mutate(연봉대비OPS율=round(OPS/연봉,1)) %>%
select(선수명,홈런,안타,득점,출루율,타율,볼넷,도루,타점)
baseball2
baseball2_melt <-melt(baseball2,id=c('선수명'))
baseball2_melt
# 3) 연봉대비 출루율과 연봉대비 타점율의 비교 ===================================
baseball3 <-baseball %>%
mutate(연봉대비출루율 = 출루율/연봉*100) %>%
mutate(연봉대비타점율 = (타점/안타)/연봉*100) %>%
select(선수명,연봉대비출루율,연봉대비타점율)
baseball3
baseball3_melt <-melt(baseball3,id=c('선수명'))
baseball3_melt
###===============================================================================
### reshape2() melt dcast 함수  ==========================================
###===============================================================================
setwd('D:/dudwlsrla92/R_Data_Analysis/Part3/data')
fruits<-read.csv('fruits_10.csv')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
library(stringr)
fruits <- c('apple','Apple','banana','pineapple')
fruits
str_detect(fruits,'A')     # 대문자 A가 있는 단어
str_detect(fruits,'^a')    # 첫글자가 소문자 a
fruits<-read.csv('fruits_10.csv')
str_detect(fruits,'A')     # 대문자 A가 있는 단어
fruits
str_detect(fruits,'a')     # 대문자 A가 있는 단어
str_detect(fruits[],'A')     # 대문자 A가 있는 단어
str_detect(fruits[],'a')     # 대문자 A가 있는 단어
str_detect(fruits,'')     # 대문자 A가 있는 단어
str_c("apple","banana")    # paste()처럼 문자열 합쳐서 출력.
str_c("Fruits: ",fruits)   # 기호를 추가할 수 있다.
Fruits
fruits
str_c("Fruits: ",fruits)
View(str_c("Fruits: ",fruits))   # 기호를 추가할 수 있다.
str_replace('apple','p','*') #문자 바꾸기
str_replace('apple','p','++')
str_replace_all('apple','p','*')
fruits <- c('apple','Apple','banana','pineapple')
fruits
str_detect(fruits,'')     # 대문자 A가 있는 단어
str_detect(fruits,'^a')    # 첫글자가 소문자 a
str_detect(fruits,'e$')    # 끝나는 글자가 소문자 e인 단어 찾기.
str_detect(fruits,'^[aA]') # 시작하는단어가 대문자 A나 소문자 a인 단어 찾기
str_detect(fruits,'[aA]')  # 단어에 소문자 a와 대문자 A가 들어 있는 단어 찾기.
str_detect(fruits,regex('a',ignore_case=T)) # 대소문자 구별 없이
str_count(fruits,'a')      # 해당 글자가 몇 번 나오는지 알려준다.
str_replace(fruits,'-','*')
fruits<-read.csv(.'fruits_10.csv')
fruits<-read.csv('fruits_10.csv')
fruits
str_replace(fruits,'0','*')
str_replace_all(fruits,'0','*')
str_replace(fruits,'0','*')
str_replace(fruits$year,'0','*')
str_replace(fruits$year,'00','*')
str_replace(fruits$year,'0','*')
str_replace_all(fruits$year,'0','*')
Filter(fruits$year %in% '10')
fruits %>% Filter(fruits$year %in% '10')
library(dplyr)
fruits %>% Filter(fruits$year %in% 10)
fruits %>% Filter(fruits$year == "2008")
fruits
Filter(fruits$year == "2000")
filter(fruits$year == "2000")
Filter(fruits,fruits$year == "2000")
Filter(fruits$year == "2000")
Filter(fruits$year == "2000")
library(dplyr)
mtcars #dplyr에서 갖고있는 데이터셋
fruits
fruits$year
fruits$year == "2000"
Filter(fruits$year == "2000")
Filter(fruits,fruits$year == "2000")
fruits
fruits,fruits$year == "2000"
fruits[(fruits$year == "2000"),]
data1 <- read.csv("2013년_프로야구선수_성적.csv")      ; data1
data2 <- filter(data1,경기>120)                        ; data2
data3 <- filter(data1,경기>120&득점>80)                ; data3
data4 <- filter(data1,포지션 %in% c('1루수','3루수'))  ; data4 # %in%(~에 속한다) 1,3루수 선수만
data4 <- filter(data1,포지션=='1루수'|포지션=='3루수') ; data4 # == | ==
Fruits %>% filter(Expenses>80)
attach(Fruits)
Fruits %>% filter(Expenses>80)
library(googleVis)
attach(Fruits)
Fruits %>% filter(Expenses>80)
Fruits %>% filter(Expenses==79 | Expenses==91)  # a & b : 공통되는 것만 뽑아라.
myabs <- function(x) {
if(x>=0) {
return(x)
} else {
return(-x)
}
}
myabs(-3.2)
myabs(4.5)
# else가 없어도 실행됨.
myabs2 <- function(x) {
if(x>=0) {
return(x)
}
return(-x)
}
myabs2(-3.2)
myabs2(4.5)
# 연습 1
myF1 <- function(x) {
if (x>0){
return(x*x)
} else {
return(0)
}
}
myF1(4.6)
myF1(-2.4)
# 연습 2
myF2 <- function(x) {
if (x>0){
return(2 * x)
} else if (x == 0 ) {
return(0)
} else {
return(-2 * x)
}
}
myF2(4.6)
myF2(0)
myF2(-2.4)
### 3. ifelse 문
no     <- scan()
myRealID <- function(a,b,c){
D=b*b - 4*a*c
print(D)
if(abs(D) < 1e-5){
return(1)
} else if (D>0) {
return(2)
} else {
return(0)
}
}
a<- 1.0000000001
b<- -2.00000000001
c<- 1.0000000002
myRealID(a,b,c)
no <- 1:100
result <- ifelse(no%%2==0,"짝","홀")
ifelse(no%/%no==0,"소수","정수")
substr('abc123',3,3)
substr('abc123',3,4)
strsplit('2019/06/05',split='/') # 지정글자 기준으로 분리
library(plotly)
iris
# 1.
a<-iris[,5]=='setosa'
b<-iris[,5]=='versicolor'
c<-iris[,5]=='virginica'
setosa<-iris[a,]
versicolor<-iris[b,]
virginica<-iris[c,]
par(mfrow=c(2,3))
plot(setosa$Sepal.Length,setosa$Sepal.Width,main="(sepal)setosa 산점도",
pch=10, cex=1.5, col="red", xlab='Length', ylab= 'Width',xlim=c(4,9),ylim=c(2,4.5))
plot(versicolor$Sepal.Length,versicolor$Sepal.Width,main="(sepal)versicolor 산점도",
pch=10, cex=1.5, col="red", xlab='Length', ylab= 'Width',xlim=c(4,9),ylim=c(2,4.5))
plot(virginica$Sepal.Length,virginica$Sepal.Width,main="(sepal)virginica 산점도",
pch=10, cex=1.5, col="red", xlab='Length', ylab= 'Width',xlim=c(4,9),ylim=c(2,4.5))
plot(setosa$Petal.Length,setosa$Petal.Width,main="(petal)setosa 산점도",
pch=10, cex=1.5, col="blue", xlab='Length', ylab= 'Width',xlim=c(1,6.5),ylim=c(0.1,2.5))
plot(versicolor$Petal.Length,versicolor$Petal.Width,main="(petal)versicolor 산점도",
pch=10, cex=1.5, col="blue", xlab='Length', ylab= 'Width',xlim=c(1,6.5),ylim=c(0.1,2.5))
plot(virginica$Petal.Length,virginica$Petal.Width,main="(petal)virginica 산점도",
pch=10, cex=1.5, col="blue", xlab='Length', ylab= 'Width',xlim=c(1,6.5),ylim=c(0.1,2.5))
# 2. 품종별 평균치
a<-aggregate(iris$Sepal.Length~Species,iris,mean)
b<-aggregate(iris$Sepal.Width~Species,iris,mean)
c<-aggregate(iris$Petal.Length~Species,iris,mean)
d<-aggregate(iris$Petal.Width~Species,iris,mean)
e<-cbind(a,b,c,d)
e2<-e[,c(-1,-3,-5,-7)]
e2<-t(e2)
colnames(e2) <- c('setosa','versicolor','virginica') ; e2
par(mfrow=c(1,2))
barplot(as.matrix(e2),main="IRIS 품종별 평균차트(1)",
beside=T,col=rainbow(nrow(e2)),ylim=c(0,10))
legend('topleft',c('S.Lenth','S.Width','P.Length','P.Width'),cex=0.6,fill=rainbow(nrow(e2)))
barplot(as.matrix(e2),main="IRIS 품종별 평균차트(2)",
beside=F,col=rainbow(nrow(e2)),ylim=c(0,20))
legend('topleft',c('S.Lenth','S.Width','P.Length','P.Width'),cex=0.6,fill=rainbow(nrow(e2)))
# 3. boxplot 12개 그리기
a<-iris[,5]=='setosa'
b<-iris[,5]=='versicolor'
c<-iris[,5]=='virginica'
setosa<-iris[a,]
versicolor<-iris[b,]
virginica<-iris[c,]
par(mfrow=c(1,3))
boxplot(setosa[,1:4],col=rainbow(5),main='setosa',ylim=c(0,8))
boxplot(versicolor[,1:4],col=rainbow(5),main='versicolor',ylim=c(0,8))
boxplot(virginica[,1:4],col=rainbow(5),main='virginica',ylim=c(0,8))
setosa[,1:4]
cat(1,NA,2) ; cat(1,NULL,2)
sum(1,NA,2) ; sum(1,NULL,2)
sum(1,NA,2,na.rm=T) #na.rm=T는 결측치를 없애준다.
iris
boxplot(setosa[,1:4])$stat
### 1. 다음의 문장을 좀더 효율적으로 개선하시오.
vec1 <- c(1:6)
vec1
vec2 <- c(10:5)
vec2
vec3 <- seq(1,3,2)
vec3
vec3 <- rep(1,3,2)
vec3
var6  <- seq(1:6)         ; var6
var7  <- seq(2,-2)        ; var7   # + 에서 - 순서로.
var8  <- seq(2,10,2)      ; var8   # (짝수) 2씩 증가시키면서 값 할당.
var9  <- seq(1,10,2)      ; var9   # (홀수)
var10 <- rep(1:3, 2)      ; var10  # 지정값 반복횟수.
var11 <- rep(1:3, each=3) ; var11  #같은값으로 each만큼 반복.
vec3 <- rep(1,3,each=3)
vec3
vec3 <- rep(1:3,each=3)
vec3
vec3 <- rep(1:3,each=2)
vec4 <- rep(1:3,2)
vec4
vec5 <- seq(1:11,2)
vec5 <- seq(1,11,2)
vec5
#1) 데이터 프레임으로 만드시오
df_score <- data.frame(이름, 중간, 기말,
강경학, 90, 50)
#1) 데이터 프레임으로 만드시오
이름 <- c(강경학,김태균,이성열,정은원)
중간 <- c(90,78,94,70)
기말 <- c(50,60,90,92)
#1) 데이터 프레임으로 만드시오
이름 <- c(강경학,김태균,이성열,정은원)
#1) 데이터 프레임으로 만드시오
이름 <- c('강경학','김태균','이성열','정은원')
중간 <- c(90,78,94,70)
기말 <- c(50,60,90,92)
df_score <- data.frame(이름=이름,중간=중간,기말=기말)
df_score
mean(중간)
iris
boxplot(setosa[,1:4])$stat
setosa[,1:4]
boxplot(setosa[,2])$stat
# 2) 이상치를 제거 전 평균, 표준편차
setosa[,2]
# 2) 이상치를 제거 전 평균, 표준편차
mean(setosa[,2])
sd(setosa[,2])
# 1) 'setosa' 종 Sepal.Width의 Box Plot
boxplot(setosa[,2])$stat
# 1) 'setosa' 종 Sepal.Width의 Box Plot
boxplot(setosa[,2])$stat
setosa[,2] %>% Filter(setosa[,2] <= 2.9)
# 2_2) 이상치를 제거 후 평균, 표준편차
library(dplyr)
setosa[,2] %>% Filter(setosa[,2] <= 2.9)
setosa[,2] %>% filter(setosa[,2] <= 2.9)
Fruits %>% filter(Expenses>90,Sales>90)
iris %>% filter(setosa < 2.9)
iris %>% filter(setosa[,2] < 2.9)
iris %>% filter(setosa[,2] < 2.9)
iris %>% filter(setosa[,2] < 2.9)
iris %>% filter(setosa[,2] < 2)
iris %>% filter(setosa[,2] < 2.9)
setosa[,2]
setosa[,2] < 2.9
setosa[setosa[,2] < 2.9)]
setosa[,setosa[,2] < 2.9)]
setosa[setosa[,2] < 2.9),]
setosa[setosa[,2] < 2.9)]
setosa[,(setosa[,2] < 2.9)]
setosa[(setosa[,2] < 2.9),]
# 2_1) 이상치를 제거 전 평균, 표준편차
setosa[(setosa[,2] < 2.9),]
setosa[,2]
# 2_1) 이상치를 제거 전 평균, 표준편차
setosa[,(setosa[,2] < 2.9)]
# 2_1) 이상치를 제거 전 평균, 표준편차
setosa[(setosa[,2] < 2.9),]
mean(setosa[,2]== -'2.3')  # 평균 3.428
setosa <- setosa[,2]
setosa
# 2_1) 이상치를 제거 전 평균, 표준편차
setosa[(setosa[,2] < 2.9),]
# 2_1) 이상치를 제거 전 평균, 표준편차
setosa[(setosa[,2] < 2.9),]
# 2_1) 이상치를 제거 전 평균, 표준편차
setosa[(setosa[,2] < 2.9),]
# 2_1) 이상치를 제거 전 평균, 표준편차
setosa[(setosa[,2] < 2.9),]
setosa[(setosa[,2] < 2.9),]
setosa[,2] < 2.9)
iris
setosa[,2]
