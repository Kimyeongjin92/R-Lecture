. <- runif(n,-1,1)
u0
cat(1,NA,2) ; cat(1,NULL,2)
sum(1,NA,2) ; sum(1,NULL,2)
sum(1,NA,2,na.rm=T) #na.rm=T는 결측치를 없애준다.
stringsAsFactors=FALSE
as.Date()           #문자형태를 날짜로 지정(YYYY-MM-DD)
now()         #현재날짜와 시간
date <- now() #변수 date에 입력
library(lubridate)
now()         #현재날짜와 시간
date <- now() #변수 date에 입력
year(date)
month(date)
day(date)
wday(date)    #일요일 = 1
wday(date, label=T) #label=T 글자로 표시
month(date) <- 2; date
.now()         #현재날짜와 시간
date <- now() #변수 date에 입력
month(date) <- 2; date
date <- now() #변수 date에 입력
now()         #현재날짜와 시간
month(date) <- 2; date
month(date)
month(date) <- 2; date
now()         #현재날짜와 시간
date <- now() #변수 date에 입력
day(date) <- 3; date
day(date) <- 3; date
month(date) <- 2; date
day(date) <- 3; date
date <- date - days(2); date
date+years(1)
date+months(1)
date+days(1)
date+hours(1)
date+minutes(1)
date+seconds(1)
date+seconds(1)
date+minutes(1)
date+seconds(1)
date+seconds(1)
date+years(1)
date+months(1)
date+days(1)
date+hours(1)
date+minutes(1)
date+seconds(1)
date <- hm("22:30") ; date #시간 분 지정하기
date
date <- hms("22:30:15") ; date # 시간 분 초 지정하기
date1 <- seq(from=as.Date('1992-01-28'),to=as.Date('2019-11-07'),by='year')  ;date1
getwd()
setwd("D:/dudwlsrla92/R_Data_Analysis/Part3/data") #
getwd() #current working directory
list.files()
scan1 <- scan('scan_1.txt')
scan1
scan1 <- scan('scan_1.txt') ; scan1
scan2 <- scan('scan_2.txt') ; scan2
scan2 <- scan('scan_2.txt') ; scan2
scan2 <- scan('scan_2.txt',digits=2) ; scan2 # 1.00 2.00의 데이터가 소수점을 지워버림
scan2 <- scan('scan_2.txt',what='') ; scan2
scan3 <- scan('scan_3.txt',what='') ; scan3
scan4 <- scan('scan_4.txt',what='') ; scan4
scan3 <- scan('scan_3.txt',what='') ; scan3
scan4 <- scan('scan_4.txt',what='') ; scan4 #
input <- scan()
input
input <- scan(what="")
input
input <- scan(what="")
input3 <- readline()
input
input3 <- readline()
input3
input3 <- readline()
#consol창에 입력 : a quick brown fox
input3
input <- scan()                             # Console 창에 직접입력해서 데이터를 만듦.
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
input4 <- readline(" a quick brown fox")
input4 <- readline(" a quick brown fox")
input4
input4
input4 <- readline(" a quick brown fox")
input4 <- readline(" a quick brown fox")
input5 <- readLines('scan_4.txt')
input5
input <- scan()                             # Console 창에 직접입력해서 데이터를 만듦.
fruits <- read.table('fruits.txt')
fruits
input5 <- readLines('scan_4.txt')
input5
scan4 <- scan('scan_4.txt',what='') ; scan4 # 문자, 숫자가 섞여있을 경우 문자로 출력.
scan1 <- scan('scan_1.txt')         ; scan1 #
scan2 <- scan('scan_2.txt')         ; scan2 # 1.00과 같은 소수점을 지워버림
scan2 <- scan('scan_2.txt',what='') ; scan2 # what='' 소수점까지 읽어줌.
scan2 <- scan('scan_2.txt')         ; scan2 # 1.00과 같은 소수점을 지워버림
scan3 <- scan('scan_3.txt',what='') ; scan3
scan4 <- scan('scan_4.txt',what='') ; scan4 # 문자, 숫자가 섞여있을 경우 문자로 출력.
scan2 <- scan('scan_2.txt',what='') ; scan2 # what='' 소수점까지 읽어줌.
scan2 <- scan('scan_2.txt')         ; scan2 # 1.00과 같은 소수점을 지워버림
scan2 <- scan('scan_2.txt',what='') ; scan2 # what='' 소수점까지 읽어줌.
scan4 <- scan('scan_4.txt',what='') ; scan4 # 문자, 숫자가 섞여있을 경우 문자로 출력.
fruits <- read.table('fruits.txt',header=T)
fruits <- read.table('fruits.txt',header=T) ; fruits
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2
fruits2 <- read.table('fruits_2.txt') ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',nrows=2)  ; fruits2
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2
fruits2 <- read.table('fruits_2.txt',nrows=2)  ; fruits2
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2 #
fruits  <- read.table('fruits.txt')            ; fruits
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2 #
fruits  <- read.table('fruits.txt')            ; fruits
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
f2top   <- read.table('fruits_2.txt',nrows=2)  ; f2top
f2bottom<- read.table('fruits_2.txt',skip=3)   ; f2bottom
fruits2 <- read.table('fruits_2.txt',skip=2)   ; fruits2 #
fruits2 <- read.table('fruits_2.txt',nrows=2)  ; fruits2
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
fruits2 <- read.table('fruits_2.txt',header=T) ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 #
fruits4 <- read.table('fruits_2.txt',nrows=2)  ; fruits4
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 #
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 #
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
f2top   <- read.table('fruits_2.txt',nrows=2)  ; f2top
f2bottom<- read.table('fruits_2.txt',skip=3)   ; f2bottom
f2bottom<- read.table('fruits_2.txt',skip=3)   ; f2bottom
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 #
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt',header=F)          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
fruits3 <- read.table('fruits_2.txt',skip=2)   ; fruits3 # SKIP은 #과 같은 주석이 포함되어 제거된다.
fruits5 <- read.csv('fruits_3.csv')
fruits5 <- read.csv('fruits_3.csv') ; fruits5
fruits6 <- read.csv('fruits_4.csv') ; fruits6
fruits6 <- read.csv('fruits_4.csv',header=F) ; fruits6
fruits  <- read.table('fruits.txt')            ; fruits
fruits  <- read.table('fruits.txt',header=T)   ; fruits  # header=T: 열 이름으로 설정
fruits2 <- read.table('fruits_2.txt')          ; fruits2 # #과 같은 주석은 빼고 읽는다.
label <- c('NO','NAME','PRICE','QTY')
fruit7 <- read.csv('fruits_4.csv',header=F,col.names=label)
fruit7
fruits6 <- read.csv('fruits_4.csv',header=F) ; fruits6
fruits5 <- read.csv('fruits_3.csv') ; fruits5 #데이터사이에 쉼표(,)가 있으면 편하다.
fruits6 <- read.csv('fruits_4.csv') ; fruits6 #txt와 다르게 csv는 header=T가 default 되어있음.
fruits6 <- read.csv('fruits_4.csv',header=F) ; fruits6
label  <- c('NO','NAME','PRICE','QTY')
fruit7 <- read.csv('fruits_4.csv',header=F,col.names=label)
fruit7
install.packages('googleVis')
library(googleVis)
install.packages("sqldf")
library(sqldf)
library(sqldf)
Fruits
write.csv(Fruits, 'Frits_sql.csv',quote=F,row.names=F)
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT*FROM file WHERE YEAR = 2008')
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008')
write.csv(Fruits, 'Frits_sql.csv',quote=F,row.names=F) #quote:문자열 표시 생략/ row 행 번호 제거.
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008')
write.csv(Fruits, 'Fruits_sql.csv',quote=F,row.names=F) #quote:문자열 표시 생략/ row 행 번호 제거.
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008')
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008') ; fruits_2
install.packages("XLConnect")
library(XLConnect)
data=loadWorkbook('fruits_6.xls',create=T)
data1=loadWorkbook('fruits_6.xls',create=T)
data2=readWorksheet(data1,sheet="sheet1",startRow=1,endRow=8,startCol=1,endCol=5)
data2
fruits6 <- read.delim("clipboard",header=T)
fruits6
data1 <- loadWorkbook('fruits_6.xls',create=T)
data1
install.packages("readxl")
library(readxl)
cust_profile <- read_excel('fruits_6.xls',       # path
+sheet = "sheet1",    # sheet name to read from
+range = "A2:D6",     # cell range to read from
+col_names = TRUE,    # TRUE to use the first row as column names
+col_types = "guess", # guess the types of columns
+na = "NA")           # Character vector of strings to use for missing values
fruits7 <- read_excel('fruits_6.xls',       # path
+sheet = "sheet1",    # sheet name to read from
+range = "A2:D6",     # cell range to read from
+col_names = TRUE,    # TRUE to use the first row as column names
+col_types = "guess", # guess the types of columns
+na = "NA")           # Character vector of strings to use for missing values
fruits7 <- read.excel('fruits_6.xls',       # path
+sheet = "sheet1",    # sheet name to read from
+range = "A2:D6",     # cell range to read from
+col_names = TRUE,    # TRUE to use the first row as column names
+col_types = "guess", # guess the types of columns
+na = "NA")           # Character vector of strings to use for missing values
fruits7 <- read_excel('fruits_6.xls',       # path
sheet = "sheet1",    # sheet name to read from
range = "A2:D6",     # cell range to read from
col_names = TRUE,    # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA")           # Character vector of strings to use for missing values
fruits7 <- read_excel('fruits_6.xls',       # path
sheet = "Sheet1",    # sheet name to read from
range = "A2:D6",     # cell range to read from
col_names = TRUE,    # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA")           # Character vector of strings to use for missing values
fruits7
fruits7 <- read_excel('fruits_6.xls',        # path
sheet     = "Sheet1", # sheet name to read from
range     = "A2:D6",  # cell range to read from
col_names = TRUE,     # TRUE to use the first row as column names
col_types = "guess",  # guess the types of columns
na = "NA")            # Character vector of strings to use for missing values
fruits_2 <- subset(Fruits, Fruits$Year=2008)
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008') ; fruits_2
Fruits
write.csv(Fruits, 'Fruits_sql.csv',quote=F,row.names=F) #quote:문자열 표시 생략/ row 행 번호 제거.
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008') ; fruits_2
library(googleVis)
library(sqldf)
fruits_2 <- read.csv.sql('Fruits_sql.csv',sql='SELECT * FROM file WHERE Year = 2008') ; fruits_2
fruits_2 <- subset(Fruits, Fruits$Year=2008)
fruits_2
fruits_2 <- subset(Fruits, Fruits$Year=2008)
?subset()
??ggplot2
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
max(vec1)
max(vec1) ; max(vec2)
mean(vec1)
mean(vec2)
min(vec1)
sd(vec1)
sum(vec1)
var(vec1)
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
max(vec1); min(vec1); sum(vec1)
mean(vec1); sd(vec1); var(vec1)
max(vec2)  # 사전 순서로 뒤의 것(e)이 나옴
library(googleVis)
Fruits
aggregate(Sales~Year,Fruits,sum) #년도별 계산 총액
aggregate(Sales~Year,Fruits,max)
aggregate(Sales~Year,Fruits,mean())
aggregate(Sales~Year,Fruits,mean)
aggregate(Sales~Year,Fruits,sum) #년도별 판매 총액
aggregate(Sales~Year,Fruits,max)
aggregate(Sales~Year,Fruits,mean)
aggregate(Sales~Fruits,Fruits,sum)
aggregate(Sales~Fruit,Fruits,sum)
aggregate(Sales~Fruit+Year,Fruits,sum)
aggregate(Sales~Fruit,Fruits,sum)
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T)
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) ; mat1
apply(mat1,1,sum)
apply(mat1,1,sum)
apply(mat1,2,sum)
apply(mat1,1,prod)
apply(mat1[,c(2,3),1,sum])
apply(mat1[,c(2,3)],1,sum)
list1 <- list(Fruits$Sales)
list1
lapply(c(list1,list2),max)
lapply(c(list1,list2),max))
lapply(c(list1,list2),max)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)
sapply(c(list1,list2),max)
lapply(c(list1,list2),max)
sapply(c(list1,list2),max)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max) #list의 형태로 출력
lapply(c(list1,list2),max) #
sapply(c(list1,list2),max) #Vector의 형태로 출력.
lapply(Fruits[,c(4,5)],max)
Fruits
sapply(Fruits[,c(4,5)],max)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)  #
sapply(c(list1,list2),max)  #Vector의 형태로 출력.
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
attach(Fruits)
tapply(Sales, Fruit, sum)
vec1 <- c(1:5)
vec2 <- c(10:50:100)
vec2 <- seq(10,50,10)
vec3 <- seq(100,500,100)
mapply(sum,vec1,vec2,vec3)
data1 <- read.csv('data1.csv')
data1 <- read.csv('data1.csv')
data1 <- read.csv('data1.csv')
data1 <- read.csv('data1.csv')
data1
aggregate(~data1$연령별,data1,sum)
Fruits
data1
aggregate(data1$연령별~,data1,sum)
aggregate(연령별~,data1,sum)
aggregate(연령별~data1[,],data1,sum)
aggregate(연령별~data1$X2000년,data1,sum)
data1 <- read.csv('data1.csv')
aggregate(연령별~data1$X2000년,data1,sum)
Fruits
apply(mat1,1,sum)          # 1 - 행 단위 계산
apply(data1,2,sum)
apply(data1,2,sum)
data1 <- read.csv('data1.csv')
apply(data1,2,sum)
apply(data1,1,sum)
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)  #
sapply(c(list1,list2),max)  #Vector의 형태로 출력.
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
tapply(Sales, Fruit, sum)
Fruits
mapply(sum,vec1,vec2,vec3)
aggregate(data1$X2000년~연령별,data1,sum)
aggregate(data1~연령별,data1,sum).
aggregate(data1~연령별,data1,sum)
aggregate(data1$연령별~연령별,data1,sum)
apply(data1,1,sum)          # 1 - 행 단위 계산
apply(data1,2,sum)          # 1 - 행 단위 계산
lapply(Fruits[,c(4,5)],max)
lapply(data1[,],sum)
lapply(data1,sum)
list1 <- list(Fruits$Sales)  ; list1
list2 <- list(Fruits$Profit) ; list2
lapply(c(list1,list2),max)  #
sapply(c(list1,list2),max)  #Vector의 형태로 출력.
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
attach(Fruits)
tapply(Sales, Fruit, sum)
aggregate(data1$연령별~data1[1,],data1,sum)
aggregate(~data1[1,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
data1[1,]
aggregate(data1[,]~data1$연령별,data1,sum)
aggregate(data1[c(1:5),]~data1$연령별,data1,sum)
(1:5)
aggregate(data1[c(1:5),]~data1$연령별,data1,sum)
c(1:5)
aggregate(data1[,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
aggregate(data1[,2]~data1$연령별,data1,sum)
aggregate(data1[,1]~data1$연령별,data1,sum)
aggregate(data1[2,]~data1$연령별,data1,sum)
aggregate(data1[1,]~data1$연령별,data1,sum)
data1[1,]
data1$연령별
aggregate(data1$연령별~data1[1,],data1,sum)
aggregate(Sales~Year,Fruits,sum) #년도별 판매 총액
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) ; mat1
apply(mat1,1,sum)          # 1 - 행 단위 계산
apply(mat1,2,sum)          # 2 - 열 단위 계산
apply(mat1,1,sum)          # 1 - 행 단위 계산
apply(mat1,2,sum)          # 2 - 열 단위 계산
mat1 <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) ; mat1
apply(mat1,2,sum)          # 2 - 열 단위 계산
apply(data1,2,sum)
apply(data1,2,sum)
tapply(data1$연령별,data1,sum)
tapply(Sales, Fruit, sum) #attach를 먼저 해야한다.
attach(Fruits)
mapply(sum,data1)
mapply(sum,data1[,1])
mapply(sum,data1[,c(2)])
mapply(sum,data1[,c(2:13)])
mapply(sum,data1[,c(2:15)])
mapply(sum,data1[,c(2:15)])
mapply(sum,data1[c(1:5),])
aggregate(data1[,c(2:15)]~data1$연령별,data1,sum)
aggregate(data1[,c(2:15)]~data1$연령별,data1,sum)
data1[,c(2:15)]
data1$연령별
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
aggregate(data1[,c(2:15)]~연령별,data1,sum)
apply(data1,2,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],1,sum)
apply(data1[,c(2:15)],1,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(노선번호~승차,data2,sum)
data2
aggregate(승차~노선번호,data2,sum)
tapply(노선번호,승차,sum)
attach(data2)
tapply(노선번호,승차,sum)
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(노선번호~승차+하차,data2,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(노선번호~승차+하차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
data2
aggregate(data2$노선번호~승차+하차,data2,sum)
aggregate(data2$노선번호~data$승차+data$하차,data2,sum)
aggregate(data2$노선번호~data$승차+data$하차,data2,sum)
aggregate(data2$노선번호~data$승차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
aggregate(노선번호~승차+하차,data2,sum)
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
aggregate(노선번호~승차+하차,data2,sum)
aggregate(Sales~Fruit,Fruits,sum)
aggregate(승차~노선번호,data1,sum)
aggregate(승차~노선번호,data2,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
aggregate(승차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
aggregate(승차+하차차~노선번호,data2,sum)
aggregate(승차+하차~노선번호,data2,sum)
data1 <- read.csv('data1.csv')
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data1 <- read.csv('data1.csv')
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,c(2:15)])
apply(data1[,c(2:15)],2,sum)
apply(data1[,c(2:15)],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
mapply(sum,data1[,-1])
apply(data1[,-1],2,sum)
apply(data1[,-1],1,sum)
mapply(sum,data1[,-1])
apply(data1[,-1],2,sum)
apply(data1[,-1],1,sum)
data2 <- read.csv('1-4호선승하차승객수.csv')
attach(data2)
tapply(승차,노선번호,sum)
tapply(하차,노선번호,sum)
apply(data2[,c(3,4)],2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
sapply(data2[,c(3,4)],sum)
apply(data2[,c(3,4)],2,sum)
Fruits
aggregate(Sales~Year,Fruits,sum) #년도별 판매 총액
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
