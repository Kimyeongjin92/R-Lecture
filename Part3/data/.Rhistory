# 11번
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n(),class)
# 11번
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n())
# 11번
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrage(desc(count))
# 11번
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count))
# 7번_3 : pick up, suv, pickup
head(mpgcopy <- mpgcopy %>%
select(class,평균연비변수) %>%
arrange(평균연비변수),3)
# 7번_3 : pick up, suv, pickup
head(mpgcopy <- mpgcopy %>%
select(class,평균연비변수) %>%
arrange(평균연비변수),3)
# 7번_3 : pick up, suv, pickup
head(mpgcopy <- mpgcopy %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)),3)
# 7번_4 :
head(mpg %>%
mutate(합산연비변수 = cty+hwy) %>%
mutate(평균연비변수 = 합산연비변수/2) %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)))
# 7번_4 :
head(mpg %>%
mutate(합산연비변수 = cty+hwy) %>%
mutate(평균연비변수 = 합산연비변수/2) %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)),3)
# 8번
mpg %>%
select(class,cty) %>%
group_by(class) %>%
summarise(평균_cty = mean(cty,na.rm=T))
# 8번
mpg %>%
select(class,cty) %>%
group_by(class) %>%
summarise(평균_cty = mean(cty,na.rm=T))
# 8번
mpg %>%
select(class,cty) %>%
group_by(class) %>%
summarise(평균_cty = mean(cty,na.rm=T))
# 8번
mpg %>%
select(class,cty) %>%
group_by(class) %>%
summarise(평균_cty = mean(cty,na.rm=T))
# 8번
mpg %>%
select(class,cty) %>%
group_by(class) %>%
summarise(평균_cty = mean(cty,na.rm=T)) %>%
arrange(desc(평균_cty))
# 7번_4 :
mpg %>%
mutate(합산연비변수 = cty+hwy) %>%
mutate(평균연비변수 = 합산연비변수/2) %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)) +head(3)
# 7번_4 :
mpg %>%
mutate(합산연비변수 = cty+hwy) %>%
mutate(평균연비변수 = 합산연비변수/2) %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 10번 : audi chevrolet dodge
head(mpg %>%
select(manufacturer,hwy) %>%
group_by(manufacturer) %>%
summarise(평균_hwy = mean(hwy,na.rm=T)),3)
# 10번 : audi chevrolet dodge
head(mpg %>%
select(manufacturer,hwy) %>%
group_by(manufacturer) %>%
summarise(평균_hwy = mean(hwy,na.rm=T)),3) %>%
arrange(평균_hwy)
# 10번 : audi chevrolet dodge
head(mpg %>%
select(manufacturer,hwy) %>%
group_by(manufacturer) %>%
summarise(평균_hwy = mean(hwy,na.rm=T)),3) %>%
arrange(desc(평균_hwy))
# 10번 : audi chevrolet dodge
mpg %>%
select(manufacturer,hwy) %>%
group_by(manufacturer) %>%
summarise(평균_hwy = mean(hwy,na.rm=T)) %>%
arrange(desc(평균_hwy)) %>% head(3)
# 11번
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(차종수=n()) %>%
arrange(desc(차종수))
# 11번
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(차종수,n()) %>%
arrange(desc(차종수))
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise_each(funs(length,n())) %>%
arrange(desc(차종수))
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise_each(funs(length,n()))
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise_each(funs(length,n()),manufacturer)
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise_each(funs(length,n()),x)
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise_each(funs(length,n()),length_class)
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise_each(funs(length,n()),)
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise_each(funs(length,n()),class_length)
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(length())
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(length(),n())
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(l=length(class,na.rm=T))
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(l=length(class))
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(l=length(class)) %>%
arrange(desc(차종수))
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(l=length(class)) %>%
arrange(desc(l))
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(차종수=length(class)) %>%
arrange(desc(차종수))
# 1번 정답 : displ이 4 이하인 자동차의 hwy가 26.6으로 더 높다.
group4 <- mpg %>%
filter(displ<4) %>%
select(displ,hwy) %>% summaraise(mean=mean(hwy)) #;mean(group4$hwy)
# 1번 정답 : displ이 4 이하인 자동차의 hwy가 26.6으로 더 높다.
group4 <- mpg %>%
filter(displ<4) %>%
select(displ,hwy) %>% summarise(mean=mean(hwy)) #;mean(group4$hwy)
# 1번 정답 : displ이 4 이하인 자동차의 hwy가 26.6으로 더 높다.
group4 <- mpg %>%
filter(displ<4) %>%
select(displ,hwy) %>% summarise(mean=mean(hwy)) #;mean(group4$hwy)
group4
# 1번 정답 : displ이 4 이하인 자동차의 hwy가 26.6으로 더 높다.
group4 <- mpg %>%
filter(displ<4) %>%
select(displ,hwy) %>% summarise(mean=mean(hwy)) #;mean(group4$hwy)
group4
# 1번 정답 : displ이 4 이하인 자동차의 hwy가 26.6으로 더 높다.
group4 <- mpg %>%
filter(displ=<4) %>%
select(displ,hwy) %>% summarise(mean=mean(hwy)) #;mean(group4$hwy)
# 1번 정답 : displ이 4 이하인 자동차의 hwy가 26.6으로 더 높다.
group4 <- mpg %>%
filter(displ<=4) %>%
select(displ,hwy) %>% summarise(mean=mean(hwy)) #;mean(group4$hwy)
group5 <- mpg %>%
filter(displ>=5) %>%
select(displ,hwy) ;mean(group5$hwy)
# 1번 정답 : displ이 4 이하인 자동차의 hwy가 26.6으로 더 높다.
mpg %>%
filter(displ<=4) %>%
select(displ,hwy) %>% summarise(mean=mean(hwy)) #;mean(group4$hwy)
mpg %>%
filter(displ>=5) %>%
select(displ,hwy) %>% summarise(mean=mean(hwy)) #;mean(group5$hwy)
# 2번 정답 : audi 17.6 / toyota 18.5로 toyota가 더 높다.
mpg %>%
filter(manufacturer %in% c('audi','toyota')) %>%
group_by(manufacturer) %>%
summarise(avarage=mean(cty,na.rm=T))
# 1번 정답 : displ이 4 이하인 자동차의 hwy가 26.6으로 더 높다.
mpg %>%
filter(displ<=4) %>%
select(displ,hwy) %>% summarise(mean=mean(hwy)) #;mean(group4$hwy)
# 3번 정답 : 22.27778
a <- mpg %>%
filter(manufacturer==c('chevrolet','ford','honda')) %>%
select(manufacturer,hwy); mean(a$hwy)
# 3번 정답 : 22.27778
a <- mpg %>%
filter(manufacturer==c('chevrolet','ford','honda')) %>%
select(manufacturer,hwy)%>%
summarise(mean=mean(hwy)) ; mean(a$hwy)
# 3번 정답 : 22.27778
a <- mpg %>%
filter(manufacturer==c('chevrolet','ford','honda')) %>%
summarise(average=mean(hwy))
# 3번 정답 : 22.27778
mpg %>%
filter(manufacturer==c('chevrolet','ford','honda')) %>%
summarise(average=mean(hwy))
# 4번 정답 : 밑에 코드
newdata <- mpg %>%
select(class,cty) ; head(newdata,10)
# 4번 정답 : 밑에 코드
newdata <- mpg %>%
select(class,cty) ; head(newdata,10)
newdata
# 4번 정답 : 밑에 코드
newdata <- mpg %>%
select(class,cty) %>%
head(10)
newdata
# 5번 정답 : compact가 20.12766으로 더 높다.
suv     <- mpg %>%
filter(class %in% 'suv')     ; mean(suv$cty)
compact <- mpg %>%
filter(class %in% 'compact') ; mean(compact$cty)
# 5번 정답 : compact가 20.12766으로 더 높다.
suv     <- mpg %>%
filter(class %in% 'suv') %>%
summarise(average=mean(cty))
suv
compact <- mpg %>%
filter(class %in% 'compact') %>%
summarise(average=mean(cty))
compact
# 6번
audi <- mpg %>%
filter(manufacturer == 'audi') %>%
arrange(desc(hwy)) %>%
head(5)
audi
# 7번_3 :
mpgcopy <- mpgcopy %>%
elect(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_2 : 평균 연비 변수
mpgcopy <- mpgcopy %>%
mutate(평균연비변수 = 합산연비변수/2)
# 7번_1 : 합산 연비 변수
mpgcopy <- mpg #복사본
mpgcopy <- mpg %>%
mutate(합산연비변수 = cty+hwy)
# 7번_2 : 평균 연비 변수
mpgcopy <- mpgcopy %>%
mutate(평균연비변수 = 합산연비변수/2)
# 7번_3 :
mpgcopy <- mpgcopy %>%
elect(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_1 : 합산 연비 변수
mpgcopy <- mpg #복사본
mpgcopy <- mpg %>%
mutate(합산연비변수 = cty+hwy)
# 7번_2 : 평균 연비 변수
mpgcopy <- mpgcopy %>%
mutate(평균연비변수 = 합산연비변수/2)
# 7번_3 :
mpgcopy <- mpgcopy %>%
elect(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_3 :
mpgcopy <- mpgcopy %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_3 :
mpgcopy <- mpgcopy %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
mpgcopy
# 7번_4 :
mpg %>%
mutate(합산연비변수 = cty+hwy) %>%
mutate(평균연비변수 = 합산연비변수/2) %>%
select(class,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 7번_4 :
mpg %>%
mutate(합산연비변수 = cty+hwy) %>%
mutate(평균연비변수 = 합산연비변수/2) %>%
select(class,합산연비변수,평균연비변수) %>%
arrange(desc(평균연비변수)) %>%
head(3)
install.packages("reshape2")
library(reshape)
library(reshape2)
fruits
melt(fruits,id='year')
melt(fruits,id='year')
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name',variable.name='변수명',value.name='변수값'))
melt(fruits,id=c('year','name',variable.name='변수명',value.name='변수값')
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명)
dcast(mtest,name~변수명,sum)
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
dcast(mtest,name~변수명,sum,subset=(name=='apple'))
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,name~변수명,sum,subset=.(name=="apple"))
dcast(mtest,name~변수명,sum,subset=.(name=="apple"))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,name~변수명,sum,subset=.(name=="apple"))
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=="apple"))
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
dcast(mtest,name~변수명,sum,subset=(name=='apple'))
dcast(mtest,name~변수명,sum,subset=.(name='apple'))
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
install.packages(strigr)
install.packages(stringr)
install.packages(stringr)
install.packages('stringr')
install.packages("stringr")
library(stringr)
fruits <- c('apple','Apple','banana','pineapple')
fruits
str_detect(fruits,'A')
str_detect(fruits,'^a')
str_detect(fruits,'^[aA]') # 시작하는단어가 대문자 A나 소문자 a인 단어 찾기
library(plyr)
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
library(reshape2)
library(plyr)
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
library(plyr)
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
install.packages('stringr')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
fruits
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
library(reshape2)
library(plyr)
fruits
fruits
library(reshape2)
library(plyr)
fruits
library(googleVis)
fruits
fruits
library(reshape2)
library(plyr)
fruits
library(googleVis)
library(googleVis)
attach(Fruits)
fruits
Fruits
melt(Fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
fruits
library(reshape2)
library(plyr)
fruits
fruits <- c('apple','Apple','banana','pineapple')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
fruits<-read.csv('fruits_10.csv')
melt(fruits,id='year') #id를 기준으로 (Wide 형태) -> (Long형태)
melt(fruits,id=c('year','name'))
melt(fruits,id=c('year','name'),variable.name='변수명',value.name='변수값')
mtest <-melt(fruits, id=c('year','name'),variable.name='변수명',value.name='변수값')
dcast(mtest,year+name~변수명) #
dcast(mtest,name~변수명,sum)  # name을 기준으로
dcast(mtest,name~변수명,sum,subset=.(name=='apple'))
install.packages('stringr')
install.packages("stringr")
library(stringr)
fruits <- c('apple','Apple','banana','pineapple')
str_detect(fruits,'A')     # 대문자 A가 있는 단어
str_detect(fruits,'^a')    # 첫글자가 소문자 a
str_detect(fruits,'e$')    # 끝나는 글자가 소문자 e인 단어 찾기.
str_detect(fruits,'^[aA]') # 시작하는단어가 대문자 A나 소문자 a인 단어 찾기
str_detect(fruits,'[aA]')  # 단어에 소문자 a와 대문자 A가 들어 있는 단어 찾기.
str_detect(fruits,ignore.case('a'))
fruits <- c('apple','Apple','banana','pineapple')
str_detect(fruits,ignore.case('a'))
str_detect(fruits,ignore.case(a))
str_detect(fruits,regex('a',ignore_case=T))
str_count(fruits,ignore.case('a'))
str_count(fruits,'a')
str_count(fruits,regex('a',ignore_case=T))
str_c("apple","banana")
str_c("Fruits: ",fruits)
str_c(fruits," name is ",fruits)
str_c(fruits,collapse="")
str_c(fruits,collapse="-")
str_dup(fruits,3)
str_length('apple')
str_length(fruits)
str_locate('apple','a')
str_length('과일일')
str_length('과일')
str_locate(fruits,'a')
str_locate('apple','app')
str_locate('apple','app')
str_locate(fruits,'a')
str_replace('apple','p','*')
str_replace('apple','p','*')  #문자 바꾸기
str_replace('apple','p','++')
str_replace_all('apple','p','*')
fruits <- str_c('apple','/','banana','/','orange')
str_split(fruits,"/")
str_sub(fruits,start=1,end=3)
str_sub(fruits,start=6,end=9)
str_sub(fruits,start=-5)
str_sub(fruits,start=1,end=3) # "app"
str_sub(fruits,start=6,end=9) # "/ban"
str_sub(fruits,start=-5)      # -는 뒤에서부터 시작.
str_sub(fruits,start=-5,end=-10)
str_sub(fruits,start=-5,end=10)
str_sub(fruits,start=-5,end=-3)
str_sub(fruits,start=-5,end=-1)
str_sub(fruits,start=-5,end=-2)
str_sub(fruits,start=-5,end=-3)
str_sub(fruits,start=-5,end=-8)
str_trim('\t apple banana berry ')
str_trim('   apple banana berry  \n   apple banana berry  ')
str_sub(a,1,3)
str(a,1,3)
str_sub(a,1,3)
library(stringr)
a<-20190603
str_sub(a,1,3)
substr(a,1,3)
library(plyr)
fruits <- read.csv("fruits_10.csv") ;fruits
ddply(fruits,'name',summarise,sum_qty=sum(qty),sum_price=sum(price))
